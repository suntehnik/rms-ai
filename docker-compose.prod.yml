services:
  web:
    container_name: requirements-webapp
    restart: no
    image: ghcr.io/suntehnik/frontend-requirements-system:latest
    platform: linux/amd64
    command: "cp -r /usr/share/nginx/html /usr/share/nginx/html-target"
    volumes: 
      - nginx-static:/usr/share/nginx/html-target
  app:
    # For local build (comment out when using registry image)
    #build:
    #  context: .
    #  dockerfile: Dockerfile
    # For registry deployment (uncomment and specify image when using registry)
    image: ghcr.io/suntehnik/rms-ai:latest
    # Specify platform if needed (uncomment for specific architecture)
    platform: linux/amd64    # For Intel/AMD x86_64
    # platform: linux/arm64    # For ARM64
    container_name: requirements-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Server Configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=requirements_db
      - DB_SSLMODE=disable
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=0
      
      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET}
      
      # Logging Configuration
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      
      # Admin Configuration
      - DEFAULT_ADMIN_PASSWORD=${DEFAULT_ADMIN_PASSWORD}
      
      # Production Settings
      - GIN_MODE=release
      - ENVIRONMENT=production
      - SWAGGER_ENABLED=false
      - CORS_ENABLED=false
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-*}
      - RATE_LIMIT_ENABLED=true
      - COMPRESSION_ENABLED=true
      - CACHE_ENABLED=true
      - DEBUG_MODE=false
      - CSP_ENABLED=true
      - SECURITY_HEADERS=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - app-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: requirements-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=requirements_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d requirements_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: requirements-redis
    restart: unless-stopped
    command: >
      sh -c "
      if [ -n \"$$REDIS_PASSWORD\" ]; then
        redis-server --appendonly yes --requirepass \"$$REDIS_PASSWORD\"
      else
        redis-server --appendonly yes
      fi
      "
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: >
        sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-cli -a \"$$REDIS_PASSWORD\" ping
        else
          redis-cli ping
        fi
        "
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: requirements-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/lib/letsencrypt:/var/lib/letsencrypt:ro
      - nginx-logs:/var/log/nginx
      - nginx-static:/usr/share/nginx
    depends_on:
      - app
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local
  nginx-static:
    driver: local

networks:
  app-network:
    driver: bridge