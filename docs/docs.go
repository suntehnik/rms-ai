// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/acceptance-criteria/{id}/delete": {
            "delete": {
                "description": "Deletes acceptance criteria with comprehensive validation and cascading deletion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deletion"
                ],
                "summary": "Delete acceptance criteria",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Acceptance Criteria ID (UUID or reference ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Deletion options",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/handlers.DeleteAcceptanceCriteriaRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DeletionResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/acceptance-criteria/{id}/validate-deletion": {
            "get": {
                "description": "Validates if acceptance criteria can be deleted and returns dependency information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deletion"
                ],
                "summary": "Validate acceptance criteria deletion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Acceptance Criteria ID (UUID or reference ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DependencyInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/deletion/confirm": {
            "get": {
                "description": "Provides detailed information for user confirmation before deletion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deletion"
                ],
                "summary": "Get deletion confirmation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity type (epic, user_story, acceptance_criteria, requirement)",
                        "name": "entity_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Entity ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DependencyInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/epics/{id}/delete": {
            "delete": {
                "description": "Deletes an epic with comprehensive validation and cascading deletion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deletion"
                ],
                "summary": "Delete epic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Epic ID (UUID or reference ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Deletion options",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/handlers.DeleteEpicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DeletionResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/epics/{id}/validate-deletion": {
            "get": {
                "description": "Validates if an epic can be deleted and returns dependency information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deletion"
                ],
                "summary": "Validate epic deletion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Epic ID (UUID or reference ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DependencyInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/requirements/{id}/delete": {
            "delete": {
                "description": "Deletes a requirement with comprehensive validation and cascading deletion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deletion"
                ],
                "summary": "Delete requirement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Requirement ID (UUID or reference ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Deletion options",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/handlers.DeleteRequirementRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DeletionResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/requirements/{id}/validate-deletion": {
            "get": {
                "description": "Validates if a requirement can be deleted and returns dependency information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deletion"
                ],
                "summary": "Validate requirement deletion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Requirement ID (UUID or reference ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DependencyInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/search/suggestions": {
            "get": {
                "description": "Provides search suggestions based on partial query input. Returns matching titles, reference IDs, and available status values to help users construct effective search queries.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Get search suggestions",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"auth\"",
                        "description": "Partial search query for generating suggestions. Minimum 2 characters recommended.",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "example": 5,
                        "description": "Maximum number of suggestions per category (1-50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search suggestions grouped by category",
                        "schema": {
                            "$ref": "#/definitions/handlers.SearchSuggestionsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters (missing query, invalid limit)",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during suggestion generation",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/user-stories/{id}/delete": {
            "delete": {
                "description": "Deletes a user story with comprehensive validation and cascading deletion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deletion"
                ],
                "summary": "Delete user story",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Story ID (UUID or reference ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Deletion options",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/handlers.DeleteUserStoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DeletionResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/user-stories/{id}/validate-deletion": {
            "get": {
                "description": "Validates if a user story can be deleted and returns dependency information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deletion"
                ],
                "summary": "Validate user story deletion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Story ID (UUID or reference ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DependencyInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/acceptance-criteria": {
            "get": {
                "description": "Retrieve a list of acceptance criteria with optional filtering by user story and author. Supports pagination and custom ordering to help organize testable conditions across the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acceptance-criteria"
                ],
                "summary": "List acceptance criteria with filtering and pagination",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Filter by user story UUID",
                        "name": "user_story_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174001\"",
                        "description": "Filter by author UUID",
                        "name": "author_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"created_at DESC\"",
                        "description": "Order by field (e.g., 'created_at DESC', 'reference_id ASC')",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "example": 50,
                        "description": "Maximum number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "description": "Number of results to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved acceptance criteria list with count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/acceptance-criteria/{id}": {
            "get": {
                "description": "Retrieve specific acceptance criteria by its UUID or human-readable reference ID (e.g., AC-001). Returns the acceptance criteria with all its properties including the testable condition and associated user story.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acceptance-criteria"
                ],
                "summary": "Get acceptance criteria by ID or reference ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Acceptance criteria UUID or reference ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved acceptance criteria",
                        "schema": {
                            "$ref": "#/definitions/models.AcceptanceCriteria"
                        }
                    },
                    "404": {
                        "description": "Acceptance criteria not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update acceptance criteria properties including the testable condition text and description. Only provided fields will be updated, maintaining the relationship to the parent user story.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acceptance-criteria"
                ],
                "summary": "Update existing acceptance criteria",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Acceptance criteria UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Acceptance criteria update request with optional fields",
                        "name": "acceptance_criteria",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateAcceptanceCriteriaRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated acceptance criteria",
                        "schema": {
                            "$ref": "#/definitions/models.AcceptanceCriteria"
                        }
                    },
                    "400": {
                        "description": "Invalid acceptance criteria ID format or request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Acceptance criteria not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete acceptance criteria by its UUID. Deletion is prevented if the acceptance criteria has associated requirements or if it's the last acceptance criteria for a user story. Use force=true to override these constraints.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acceptance-criteria"
                ],
                "summary": "Delete acceptance criteria",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Acceptance criteria UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "example": false,
                        "description": "Force delete with dependencies and constraints",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted acceptance criteria"
                    },
                    "400": {
                        "description": "Invalid acceptance criteria ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Acceptance criteria not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Acceptance criteria has associated requirements or is the last one for user story (use force=true)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/acceptance-criteria/{id}/comments/inline": {
            "post": {
                "description": "Create an inline comment linked to specific text positions within acceptance criteria description or conditions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acceptance-criteria",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Create an inline comment on acceptance criteria text",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Acceptance Criteria ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Inline comment creation request with text position data",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created acceptance criteria inline comment",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request - missing inline comment data or invalid text positions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Acceptance criteria not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/acceptance-criteria/{id}/comments/inline/validate": {
            "post": {
                "description": "Validate and update inline comment positions after acceptance criteria text content has been modified.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acceptance-criteria",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Validate acceptance criteria inline comments after text changes",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Acceptance Criteria ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Text validation request",
                        "name": "validation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully validated acceptance criteria inline comments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid acceptance criteria ID format or missing new_description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error during validation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/acceptance-criteria/{id}/comments/inline/visible": {
            "get": {
                "description": "Retrieve all visible inline comments for specific acceptance criteria, excluding those invalidated by text changes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acceptance-criteria",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Get visible inline comments for acceptance criteria",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Acceptance Criteria ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved acceptance criteria inline comments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid acceptance criteria ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Acceptance criteria not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/comments/status/{status}": {
            "get": {
                "description": "Retrieve all comments filtered by their resolution status (resolved or unresolved) across all entities.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get comments by resolution status",
                "parameters": [
                    {
                        "enum": [
                            "resolved",
                            "unresolved"
                        ],
                        "type": "string",
                        "description": "Resolution status",
                        "name": "status",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved comments by status\" example({\"comments\": [{\"id\": \"123e4567-e89b-12d3-a456-426614174000\", \"content\": \"This needs clarification\", \"is_resolved\": false}], \"count\": 1, \"status\": \"unresolved\"})",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid status parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/comments/{id}": {
            "get": {
                "description": "Retrieve a single comment by its unique identifier, including author information and thread context.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get a specific comment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved comment",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update the content of an existing comment. Only the comment content can be modified after creation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Update an existing comment",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Comment update request",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated comment",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID format, invalid request body, or empty content",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a comment by ID. Comments with replies cannot be deleted to maintain thread integrity.",
                "tags": [
                    "comments"
                ],
                "summary": "Delete a comment",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted comment"
                    },
                    "400": {
                        "description": "Invalid comment ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Comment has replies and cannot be deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/comments/{id}/replies": {
            "get": {
                "description": "Retrieve all direct replies to a specific comment, supporting threaded comment discussions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get replies to a specific comment",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Parent comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved comment replies\" example({\"replies\": [{\"id\": \"123e4567-e89b-12d3-a456-426614174001\", \"content\": \"I agree with this point\", \"parent_comment_id\": \"123e4567-e89b-12d3-a456-426614174000\"}], \"count\": 1})",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new reply to an existing comment, automatically inheriting the parent's entity context for threaded discussions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Create a reply to a comment",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Parent comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reply creation request (entity_type and entity_id will be inherited from parent)",
                        "name": "reply",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created reply",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parent comment ID format, invalid request body, or empty content",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Parent comment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/comments/{id}/resolve": {
            "post": {
                "description": "Mark a comment as resolved to indicate that the issue or question has been addressed.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Mark a comment as resolved",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully resolved comment",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/comments/{id}/unresolve": {
            "post": {
                "description": "Mark a previously resolved comment as unresolved to reopen the discussion or issue.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Mark a comment as unresolved",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unresolved comment",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/config/relationship-types": {
            "get": {
                "description": "Retrieves a paginated list of all relationship types with optional sorting. Supports ordering by name, created_at, or updated_at fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "List relationship types",
                "parameters": [
                    {
                        "type": "string",
                        "default": "name",
                        "example": "\"name\"",
                        "description": "Sort field (name, created_at, updated_at)",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "example": 50,
                        "description": "Maximum number of results (1-100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Number of results to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved relationship types",
                        "schema": {
                            "$ref": "#/definitions/handlers.RelationshipTypeListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new relationship type for defining how requirements relate to each other. Common types include depends_on, blocks, relates_to, conflicts_with, and derives_from.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Create a new relationship type",
                "parameters": [
                    {
                        "description": "Relationship type creation request",
                        "name": "relationship_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateRelationshipTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created relationship type",
                        "schema": {
                            "$ref": "#/definitions/models.RelationshipType"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Relationship type name already exists",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/relationship-types/{id}": {
            "get": {
                "description": "Retrieves a specific relationship type by its UUID. Returns complete relationship type information including name, description, and usage metadata.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Get relationship type by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Relationship type ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved relationship type",
                        "schema": {
                            "$ref": "#/definitions/models.RelationshipType"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Relationship type not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing relationship type. Only provided fields will be updated. Name must be unique across all relationship types.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Update relationship type",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Relationship type ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Relationship type update request",
                        "name": "relationship_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateRelationshipTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated relationship type",
                        "schema": {
                            "$ref": "#/definitions/models.RelationshipType"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Relationship type not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Relationship type name already exists",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a relationship type. By default, deletion is prevented if there are requirement relationships using this type. Use force=true to override this protection (use with caution).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Delete relationship type",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Relationship type ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "Force deletion even if relationships exist",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted relationship type (no content)"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Relationship type not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Relationship type has associated relationships and cannot be deleted",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/requirement-types": {
            "get": {
                "description": "Retrieves a paginated list of all requirement types with optional sorting. Supports ordering by name, created_at, or updated_at fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "List requirement types",
                "parameters": [
                    {
                        "type": "string",
                        "default": "name",
                        "example": "\"name\"",
                        "description": "Sort field (name, created_at, updated_at)",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "example": 50,
                        "description": "Maximum number of results (1-100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Number of results to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved requirement types",
                        "schema": {
                            "$ref": "#/definitions/handlers.RequirementTypeListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new requirement type for categorizing requirements. Requirement types help organize and classify different kinds of requirements (functional, non-functional, business rules, etc.). Requires Administrator role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Create a new requirement type",
                "parameters": [
                    {
                        "description": "Requirement type creation request",
                        "name": "requirement_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateRequirementTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created requirement type",
                        "schema": {
                            "$ref": "#/definitions/models.RequirementType"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Administrator role required",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Requirement type name already exists",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/requirement-types/{id}": {
            "get": {
                "description": "Retrieves a specific requirement type by its UUID. Returns complete requirement type information including name, description, and metadata.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Get requirement type by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Requirement type ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved requirement type",
                        "schema": {
                            "$ref": "#/definitions/models.RequirementType"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Requirement type not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing requirement type. Only provided fields will be updated. Name must be unique across all requirement types.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Update requirement type",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Requirement type ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Requirement type update request",
                        "name": "requirement_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateRequirementTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated requirement type",
                        "schema": {
                            "$ref": "#/definitions/models.RequirementType"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Requirement type not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Requirement type name already exists",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a requirement type. By default, deletion is prevented if there are requirements using this type. Use force=true to override this protection (use with caution).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Delete requirement type",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Requirement type ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "Force deletion even if requirements exist",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted requirement type (no content)"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Requirement type not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Requirement type has associated requirements and cannot be deleted",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/status-models": {
            "get": {
                "description": "Retrieves a paginated list of status models with optional filtering by entity type and sorting. Supports ordering by entity_type, name, created_at, or updated_at fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "List status models",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"epic\"",
                        "description": "Filter by entity type (epic, user_story, requirement, acceptance_criteria)",
                        "name": "entity_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"entity_type, name\"",
                        "example": "\"entity_type\"",
                        "description": "Sort field (entity_type, name, created_at, updated_at)",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "example": 50,
                        "description": "Maximum number of results (1-100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Number of results to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved status models",
                        "schema": {
                            "$ref": "#/definitions/handlers.StatusModelListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new status model for defining status workflows for different entity types (epic, user_story, requirement, acceptance_criteria). Each entity type can have multiple status models with one marked as default.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Create a new status model",
                "parameters": [
                    {
                        "description": "Status model creation request",
                        "name": "status_model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateStatusModelRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created status model",
                        "schema": {
                            "$ref": "#/definitions/models.StatusModel"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation error, or invalid entity type",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Status model name already exists for this entity type",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/status-models/default/{entity_type}": {
            "get": {
                "description": "Retrieves the default status model for a specific entity type. The default status model is used when creating new entities of that type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Get default status model for entity type",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"epic\"",
                        "description": "Entity type (epic, user_story, requirement, acceptance_criteria)",
                        "name": "entity_type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved default status model",
                        "schema": {
                            "$ref": "#/definitions/models.StatusModel"
                        }
                    },
                    "404": {
                        "description": "Default status model not found for entity type",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/status-models/{id}": {
            "get": {
                "description": "Retrieves a specific status model by its UUID. Returns complete status model information including entity type, name, description, and default flag.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Get status model by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status model ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved status model",
                        "schema": {
                            "$ref": "#/definitions/models.StatusModel"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Status model not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing status model. Only provided fields will be updated. Name must be unique within the same entity type. Setting is_default=true will make other models for the same entity type non-default.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Update status model",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status model ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status model update request",
                        "name": "status_model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateStatusModelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated status model",
                        "schema": {
                            "$ref": "#/definitions/models.StatusModel"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Status model not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Status model name already exists for this entity type",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a status model and all its associated statuses and transitions. Use with caution as this will affect entities using this status model. Consider setting a different default model before deletion.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Delete status model",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status model ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "Force deletion (reserved for future use)",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted status model (no content)"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Status model not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/status-models/{id}/statuses": {
            "get": {
                "description": "Retrieves all statuses belonging to a specific status model, ordered by their display order. Includes initial and final status flags for workflow understanding.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "List statuses by status model",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status model ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved statuses",
                        "schema": {
                            "$ref": "#/definitions/handlers.StatusListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/status-models/{id}/transitions": {
            "get": {
                "description": "Retrieves all status transitions belonging to a specific status model. Shows the complete workflow rules including allowed status changes and transition metadata.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "List status transitions by status model",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status model ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved status transitions",
                        "schema": {
                            "$ref": "#/definitions/handlers.StatusTransitionListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/status-transitions": {
            "post": {
                "description": "Creates a new status transition rule within a status model. Transitions define which status changes are allowed. Both from_status and to_status must belong to the same status model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Create a new status transition",
                "parameters": [
                    {
                        "description": "Status transition creation request",
                        "name": "transition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateStatusTransitionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created status transition",
                        "schema": {
                            "$ref": "#/definitions/models.StatusTransition"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation error, status model not found, or invalid status transition",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Status transition already exists",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/status-transitions/{id}": {
            "get": {
                "description": "Retrieves a specific status transition by its UUID. Returns complete transition information including from/to statuses, name, and description.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Get status transition by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status transition ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved status transition",
                        "schema": {
                            "$ref": "#/definitions/models.StatusTransition"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Status transition not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing status transition. Only provided fields will be updated. The from_status and to_status cannot be changed after creation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Update status transition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status transition ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status transition update request",
                        "name": "transition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateStatusTransitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated status transition",
                        "schema": {
                            "$ref": "#/definitions/models.StatusTransition"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Status transition not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a status transition rule. This will prevent the corresponding status change from being allowed in the future. Existing entities will not be affected.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Delete status transition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status transition ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted status transition (no content)"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Status transition not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/statuses": {
            "post": {
                "description": "Creates a new status within a status model. Statuses define the possible states for entities. Each status can be marked as initial (starting state) or final (ending state) and has an order for display purposes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Create a new status",
                "parameters": [
                    {
                        "description": "Status creation request",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created status",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation error, or status model not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Status name already exists in this model",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config/statuses/{id}": {
            "get": {
                "description": "Retrieves a specific status by its UUID. Returns complete status information including name, description, color, flags, and order within the status model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Get status by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved status",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Status not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing status. Only provided fields will be updated. Name must be unique within the same status model. Changing initial/final flags may affect status transitions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Update status",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status update request",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated status",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Status not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Status name already exists in this model",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a status from a status model. This will also remove any status transitions involving this status. Use with caution as entities using this status may be affected.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Delete status",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Status ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "Force deletion (reserved for future use)",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted status (no content)"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Status not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/epics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of epics with optional filtering by creator, assignee, status, and priority. Supports pagination and custom ordering. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics"
                ],
                "summary": "List epics with filtering and pagination",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174001\"",
                        "description": "Filter by creator UUID",
                        "name": "creator_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174002\"",
                        "description": "Filter by assignee UUID",
                        "name": "assignee_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "Backlog",
                            "Draft",
                            "In Progress",
                            "Done",
                            "Cancelled"
                        ],
                        "type": "string",
                        "example": "\"Backlog\"",
                        "description": "Filter by epic status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "maximum": 4,
                        "minimum": 1,
                        "type": "integer",
                        "example": 1,
                        "description": "Filter by priority level",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"created_at DESC\"",
                        "description": "Order results by field",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "example": 20,
                        "description": "Maximum number of results to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Number of results to skip for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of epics with count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new epic with the provided details. The epic will be assigned a unique reference ID (EP-XXX format) and default status of \"Backlog\". Requires User or Administrator role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics"
                ],
                "summary": "Create a new epic",
                "parameters": [
                    {
                        "description": "Epic creation request",
                        "name": "epic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateEpicRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created epic",
                        "schema": {
                            "$ref": "#/definitions/models.Epic"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, creator/assignee not found, or invalid priority",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User or Administrator role required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/epics/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a single epic by its UUID or reference ID (e.g., EP-001). Supports both formats for flexible access. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics"
                ],
                "summary": "Get an epic by ID or reference ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Epic ID (UUID) or reference ID (EP-XXX)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Epic found successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Epic"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Epic not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an epic's properties. Only provided fields will be updated. Supports partial updates with validation for status transitions and priority values. Requires User or Administrator role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics"
                ],
                "summary": "Update an existing epic",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Epic UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Epic update request",
                        "name": "epic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateEpicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Epic updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Epic"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, epic ID format, assignee not found, invalid priority, invalid status, or invalid status transition",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User or Administrator role required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Epic not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an epic by UUID. By default, epics with associated user stories cannot be deleted unless force=true is specified. Requires User or Administrator role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics"
                ],
                "summary": "Delete an epic",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Epic UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "example": false,
                        "description": "Force delete even if epic has user stories",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Epic deleted successfully"
                    },
                    "400": {
                        "description": "Invalid epic ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User or Administrator role required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Epic not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Epic has associated user stories and cannot be deleted (use force=true to override)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/epics/{id}/assign": {
            "patch": {
                "description": "Assign an epic to a specific user by updating the assignee_id. The system validates that the assignee user exists before making the assignment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics"
                ],
                "summary": "Assign an epic to a user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Epic UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Assignment request",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.AssignEpicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Epic assigned successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Epic"
                        }
                    },
                    "400": {
                        "description": "Invalid epic ID format, request body, or assignee not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Epic not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/epics/{id}/comments/inline": {
            "post": {
                "description": "Create an inline comment linked to specific text positions within an epic's description or title.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Create an inline comment on an epic's text",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Epic ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Inline comment creation request with text position data",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created epic inline comment",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request - missing inline comment data or invalid text positions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Epic not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/epics/{id}/comments/inline/validate": {
            "post": {
                "description": "Validate and update inline comment positions after an epic's text content has been modified.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Validate epic inline comments after text changes",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Epic ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Text validation request",
                        "name": "validation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully validated epic inline comments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid epic ID format or missing new_description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error during validation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/epics/{id}/comments/inline/visible": {
            "get": {
                "description": "Retrieve all visible inline comments for a specific epic, excluding those invalidated by text changes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Get visible inline comments for an epic",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Epic ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved epic inline comments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid epic ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Epic not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/epics/{id}/status": {
            "patch": {
                "description": "Update the workflow status of an epic. The system validates status transitions and ensures only valid status changes are allowed. All status transitions are currently permitted as per business requirements.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics"
                ],
                "summary": "Change the status of an epic",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Epic UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status change request",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.ChangeEpicStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Epic status updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Epic"
                        }
                    },
                    "400": {
                        "description": "Invalid epic ID format, request body, epic status, or status transition",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Epic not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/epics/{id}/user-stories": {
            "get": {
                "description": "Retrieve an epic along with all its associated user stories. This endpoint provides a hierarchical view of the epic and its child user stories, including their acceptance criteria and requirements if available.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics"
                ],
                "summary": "Get an epic with its user stories",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Epic ID (UUID) or reference ID (EP-XXX)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Epic with user stories retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Epic"
                        }
                    },
                    "404": {
                        "description": "Epic not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user story that belongs to the specified epic. This is a nested resource creation that establishes the parent-child relationship between epic and user story. The epic ID from the URL path will override any epic_id in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epics"
                ],
                "summary": "Create a new user story within an epic",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Epic UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User story creation request (epic_id will be overridden by path parameter)",
                        "name": "user_story",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateUserStoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user story within epic",
                        "schema": {
                            "$ref": "#/definitions/models.UserStory"
                        }
                    },
                    "400": {
                        "description": "Invalid epic ID format, request body, creator/assignee not found, epic not found, invalid priority, or invalid user story template",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/requirement-relationships/{id}": {
            "delete": {
                "description": "Delete a specific relationship between requirements by its UUID. This removes the dependency or association between the two requirements.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "Delete a requirement relationship",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Relationship UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted relationship"
                    },
                    "400": {
                        "description": "Invalid relationship ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Relationship not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/requirements": {
            "get": {
                "description": "Retrieve a list of requirements with optional filtering by user story, acceptance criteria, creator, assignee, status, priority, and type. Supports pagination and custom ordering.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "List requirements with filtering and pagination",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Filter by user story UUID",
                        "name": "user_story_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174001\"",
                        "description": "Filter by acceptance criteria UUID",
                        "name": "acceptance_criteria_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174002\"",
                        "description": "Filter by creator UUID",
                        "name": "creator_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174003\"",
                        "description": "Filter by assignee UUID",
                        "name": "assignee_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "draft",
                            "in_review",
                            "approved",
                            "implemented",
                            "tested",
                            "rejected"
                        ],
                        "type": "string",
                        "example": "\"draft\"",
                        "description": "Filter by requirement status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "maximum": 4,
                        "minimum": 1,
                        "type": "integer",
                        "example": 2,
                        "description": "Filter by priority level",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174004\"",
                        "description": "Filter by requirement type UUID",
                        "name": "type_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"created_at DESC\"",
                        "description": "Order by field (e.g., 'created_at DESC', 'priority ASC')",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "example": 50,
                        "description": "Maximum number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "description": "Number of results to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved requirements list with count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new detailed requirement with specified properties. Requires a valid user story ID, creator, and requirement type. The assignee defaults to the creator if not specified. Requires User or Administrator role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "Create a new requirement",
                "parameters": [
                    {
                        "description": "Requirement creation request with all required fields",
                        "name": "requirement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateRequirementRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created requirement",
                        "schema": {
                            "$ref": "#/definitions/models.Requirement"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, creator/assignee not found, user story not found, requirement type not found, acceptance criteria not found, or invalid priority",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User or Administrator role required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/requirements/relationships": {
            "post": {
                "description": "Create a typed relationship between two requirements (e.g., depends_on, blocks, relates_to, conflicts_with, derives_from). Prevents circular relationships and duplicate relationships. Validates that both requirements and the relationship type exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "Create a relationship between requirements",
                "parameters": [
                    {
                        "description": "Relationship creation request with source, target, type, and creator",
                        "name": "relationship",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateRelationshipRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created requirement relationship",
                        "schema": {
                            "$ref": "#/definitions/models.RequirementRelationship"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, source/target requirement not found, relationship type not found, creator not found, or circular relationship detected",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Relationship already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/requirements/search": {
            "get": {
                "description": "Perform full-text search across requirement titles and descriptions using PostgreSQL's text search capabilities. Returns requirements that match the search query with relevance ranking.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "Search requirements by text",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"authentication validation\"",
                        "description": "Search query text",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved search results with count and query",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Search query parameter 'q' is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/requirements/{id}": {
            "get": {
                "description": "Retrieve a specific requirement by its UUID or human-readable reference ID (e.g., REQ-001). Returns the requirement with all its properties and relationships.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "Get a requirement by ID or reference ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Requirement UUID or reference ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved requirement",
                        "schema": {
                            "$ref": "#/definitions/models.Requirement"
                        }
                    },
                    "404": {
                        "description": "Requirement not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update a requirement's properties including acceptance criteria, assignee, priority, status, type, title, and description. Only provided fields will be updated. Status transitions are validated according to business rules.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "Update an existing requirement",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Requirement UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Requirement update request with optional fields",
                        "name": "requirement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateRequirementRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated requirement",
                        "schema": {
                            "$ref": "#/definitions/models.Requirement"
                        }
                    },
                    "400": {
                        "description": "Invalid requirement ID format, request body, assignee not found, requirement type not found, acceptance criteria not found, invalid priority, invalid requirement status, or invalid status transition",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Requirement not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a requirement by its UUID. By default, deletion is prevented if the requirement has associated relationships. Use force=true query parameter to delete with all dependencies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "Delete a requirement",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Requirement UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "example": false,
                        "description": "Force delete with dependencies",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted requirement"
                    },
                    "400": {
                        "description": "Invalid requirement ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Requirement not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Requirement has associated relationships and cannot be deleted (use force=true)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/requirements/{id}/assign": {
            "patch": {
                "description": "Assign a requirement to a specific user by updating the assignee field. The assignee must be a valid user in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "Assign requirement to a user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Requirement UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Assignment request",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully assigned requirement",
                        "schema": {
                            "$ref": "#/definitions/models.Requirement"
                        }
                    },
                    "400": {
                        "description": "Invalid requirement ID format, request body, or assignee not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Requirement not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/requirements/{id}/comments/inline": {
            "post": {
                "description": "Create an inline comment linked to specific text positions within a requirement's description or specification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Create an inline comment on a requirement's text",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Requirement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Inline comment creation request with text position data",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created requirement inline comment",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request - missing inline comment data or invalid text positions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Requirement not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/requirements/{id}/comments/inline/validate": {
            "post": {
                "description": "Validate and update inline comment positions after a requirement's text content has been modified.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Validate requirement inline comments after text changes",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Requirement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Text validation request",
                        "name": "validation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully validated requirement inline comments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid requirement ID format or missing new_description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error during validation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/requirements/{id}/comments/inline/visible": {
            "get": {
                "description": "Retrieve all visible inline comments for a specific requirement, excluding those invalidated by text changes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Get visible inline comments for a requirement",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Requirement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved requirement inline comments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid requirement ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Requirement not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/requirements/{id}/relationships": {
            "get": {
                "description": "Retrieve all incoming and outgoing relationships for a specific requirement by its UUID or reference ID. Returns both relationships where the requirement is the source and where it is the target.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "Get all relationships for a requirement",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Requirement UUID or reference ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved relationships list with count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Requirement not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/requirements/{id}/status": {
            "patch": {
                "description": "Update the status of a requirement. Status transitions are validated according to business rules to ensure proper workflow progression (e.g., draft → in_review → approved → implemented → tested).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requirements"
                ],
                "summary": "Change requirement status",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Requirement UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status change request",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully changed requirement status",
                        "schema": {
                            "$ref": "#/definitions/models.Requirement"
                        }
                    },
                    "400": {
                        "description": "Invalid requirement ID format, request body, invalid requirement status, or invalid status transition",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Requirement not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Performs full-text search and filtering across epics, user stories, acceptance criteria, and requirements. Supports PostgreSQL full-text search with ranking and comprehensive filtering options. Results are cached for performance. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search across all entities",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user authentication\"",
                        "description": "Full-text search query. Searches across titles, descriptions, and reference IDs. Supports PostgreSQL text search syntax with automatic prefix matching.",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Filter by creator ID (UUID format)",
                        "name": "creator_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174001\"",
                        "description": "Filter by assignee ID (UUID format)",
                        "name": "assignee_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Filter by priority level (1=Critical, 2=High, 3=Medium, 4=Low)",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"in_progress\"",
                        "description": "Filter by status (backlog, draft, in_progress, done, cancelled, active, obsolete)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2023-01-01T00:00:00Z\"",
                        "description": "Filter by creation date from (RFC3339 format: YYYY-MM-DDTHH:MM:SSZ)",
                        "name": "created_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2023-12-31T23:59:59Z\"",
                        "description": "Filter by creation date to (RFC3339 format: YYYY-MM-DDTHH:MM:SSZ)",
                        "name": "created_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174002\"",
                        "description": "Filter by parent epic ID (UUID format). Returns user stories, acceptance criteria, and requirements within the epic.",
                        "name": "epic_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174003\"",
                        "description": "Filter by parent user story ID (UUID format). Returns acceptance criteria and requirements within the user story.",
                        "name": "user_story_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174004\"",
                        "description": "Filter by parent acceptance criteria ID (UUID format). Returns requirements within the acceptance criteria.",
                        "name": "acceptance_criteria_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174005\"",
                        "description": "Filter by requirement type ID (UUID format). Only applies to requirement entities.",
                        "name": "requirement_type_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174006\"",
                        "description": "Filter by author ID (UUID format). Applies to comments and acceptance criteria.",
                        "name": "author_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "example": "\"priority\"",
                        "description": "Sort by field: priority, created_at, last_modified, title, relevance (relevance only available with query)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "example": "\"asc\"",
                        "description": "Sort order: asc (ascending) or desc (descending)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "example": 20,
                        "description": "Maximum number of results to return (1-100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Number of results to skip for pagination (0-based)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful search with results, pagination metadata, and execution details",
                        "schema": {
                            "$ref": "#/definitions/service.SearchResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search parameters (invalid UUID format, out of range values, invalid sort fields)",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during search operation",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user-stories": {
            "get": {
                "description": "Retrieve a list of user stories with optional filtering by epic, creator, assignee, status, and priority. Supports pagination and custom sorting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "List user stories with filtering and pagination",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Filter by epic UUID",
                        "name": "epic_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174001\"",
                        "description": "Filter by creator UUID",
                        "name": "creator_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174002\"",
                        "description": "Filter by assignee UUID",
                        "name": "assignee_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "Backlog",
                            "Draft",
                            "In Progress",
                            "Done",
                            "Cancelled"
                        ],
                        "type": "string",
                        "example": "\"Backlog\"",
                        "description": "Filter by user story status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "maximum": 4,
                        "minimum": 1,
                        "type": "integer",
                        "example": 2,
                        "description": "Filter by priority level",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"created_at DESC\"",
                        "description": "Sort order for results",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "example": 20,
                        "description": "Maximum number of results to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Number of results to skip for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user stories list with count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user story with the provided details. The epic_id must be specified in the request body to establish the parent-child relationship. The user story description should follow the template format: 'As [role], I want [function], so that [goal]'.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "Create a new user story",
                "parameters": [
                    {
                        "description": "User story creation request",
                        "name": "user_story",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateUserStoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user story",
                        "schema": {
                            "$ref": "#/definitions/models.UserStory"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, epic_id required, creator/assignee not found, epic not found, invalid priority, or invalid user story template",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/user-stories/{id}": {
            "get": {
                "description": "Retrieve a specific user story by its UUID or human-readable reference ID (e.g., US-001). Returns the user story with basic information excluding related entities.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "Get a user story by ID or reference ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User story UUID or reference ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user story",
                        "schema": {
                            "$ref": "#/definitions/models.UserStory"
                        }
                    },
                    "404": {
                        "description": "User story not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing user story by its UUID. All fields in the request body are optional and will only update the provided fields. The user story description should follow the template format if provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "Update a user story",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User story UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User story update request",
                        "name": "user_story",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateUserStoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user story",
                        "schema": {
                            "$ref": "#/definitions/models.UserStory"
                        }
                    },
                    "400": {
                        "description": "Invalid user story ID format, request body, assignee not found, invalid priority, invalid status, invalid status transition, or invalid user story template",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User story not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user story by its UUID. By default, deletion will fail if the user story has associated requirements or acceptance criteria. Use the force=true query parameter to delete with all dependencies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "Delete a user story",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User story UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "example": false,
                        "description": "Force delete with all dependencies",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted user story"
                    },
                    "400": {
                        "description": "Invalid user story ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User story not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "User story has associated requirements and cannot be deleted (use force=true)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/user-stories/{id}/acceptance-criteria": {
            "get": {
                "description": "Retrieve a specific user story by its UUID or reference ID, including all associated acceptance criteria. This endpoint provides hierarchical data showing the user story and its testable conditions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "Get user story with acceptance criteria",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User story UUID or reference ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user story with acceptance criteria",
                        "schema": {
                            "$ref": "#/definitions/models.UserStory"
                        }
                    },
                    "404": {
                        "description": "User story not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create new acceptance criteria that belongs to the specified user story. This is a nested resource creation that establishes the parent-child relationship between user story and acceptance criteria. The user story ID from the URL path will be used as the parent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "Create acceptance criteria within a user story",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User story UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Acceptance criteria creation request (user_story_id will be set from path parameter)",
                        "name": "acceptance_criteria",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateAcceptanceCriteriaRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created acceptance criteria within user story",
                        "schema": {
                            "$ref": "#/definitions/models.AcceptanceCriteria"
                        }
                    },
                    "400": {
                        "description": "Invalid user story ID format, request body, user story not found, or author not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/user-stories/{id}/assign": {
            "patch": {
                "description": "Assign a user story to a specific user by updating the assignee_id. The assignee must be a valid user in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "Assign user story to a user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User story UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Assignment request",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully assigned user story",
                        "schema": {
                            "$ref": "#/definitions/models.UserStory"
                        }
                    },
                    "400": {
                        "description": "Invalid user story ID format, request body, or assignee not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User story not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/user-stories/{id}/comments/inline": {
            "post": {
                "description": "Create an inline comment linked to specific text positions within a user story's description or acceptance criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Create an inline comment on a user story's text",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User Story ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Inline comment creation request with text position data",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user story inline comment",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request - missing inline comment data or invalid text positions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User story not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user-stories/{id}/comments/inline/validate": {
            "post": {
                "description": "Validate and update inline comment positions after a user story's text content has been modified.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Validate user story inline comments after text changes",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User Story ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Text validation request",
                        "name": "validation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully validated user story inline comments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user story ID format or missing new_description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error during validation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user-stories/{id}/comments/inline/visible": {
            "get": {
                "description": "Retrieve all visible inline comments for a specific user story, excluding those invalidated by text changes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories",
                    "comments",
                    "inline-comments"
                ],
                "summary": "Get visible inline comments for a user story",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User Story ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user story inline comments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user story ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User story not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user-stories/{id}/requirements": {
            "get": {
                "description": "Retrieve a specific user story by its UUID or reference ID, including all associated detailed requirements. This endpoint provides hierarchical data showing the user story and its technical requirements.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "Get user story with requirements",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User story UUID or reference ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user story with requirements",
                        "schema": {
                            "$ref": "#/definitions/models.UserStory"
                        }
                    },
                    "404": {
                        "description": "User story not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new detailed requirement that belongs to the specified user story. This is a nested resource creation that establishes the parent-child relationship between user story and requirement. The user story ID from the URL path will be used as the parent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "Create a requirement within a user story",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User story UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Requirement creation request (user_story_id will be set from path parameter)",
                        "name": "requirement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created requirement within user story",
                        "schema": {
                            "$ref": "#/definitions/models.Requirement"
                        }
                    },
                    "400": {
                        "description": "Invalid user story ID format, request body, creator/assignee not found, user story not found, requirement type not found, acceptance criteria not found, or invalid priority",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/user-stories/{id}/status": {
            "patch": {
                "description": "Update the status of a user story. All status transitions are allowed by default. Valid statuses are: Backlog, Draft, In Progress, Done, Cancelled.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-stories"
                ],
                "summary": "Change user story status",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User story UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status change request",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully changed user story status",
                        "schema": {
                            "$ref": "#/definitions/models.UserStory"
                        }
                    },
                    "400": {
                        "description": "Invalid user story ID format, request body, invalid status, or invalid status transition",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User story not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/acceptance-criteria": {
            "get": {
                "description": "Retrieve all acceptance criteria created by a specific user. This endpoint helps track which testable conditions were authored by each team member.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get acceptance criteria by author",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "Author UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved acceptance criteria list with count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid author ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Author not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/{entityType}/{id}/comments": {
            "get": {
                "description": "Retrieve all comments for a specific entity with optional filtering by status and threading. Supports both flat and threaded comment structures.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get all comments for an entity",
                "parameters": [
                    {
                        "enum": [
                            "epic",
                            "user_story",
                            "acceptance_criteria",
                            "requirement"
                        ],
                        "type": "string",
                        "description": "Entity type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Return comments in threaded structure",
                        "name": "threaded",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Return only inline comments",
                        "name": "inline",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "resolved",
                            "unresolved"
                        ],
                        "type": "string",
                        "description": "Filter by resolution status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved comments\" example({\"comments\": [{\"id\": \"123e4567-e89b-12d3-a456-426614174000\", \"content\": \"This needs clarification\", \"is_resolved\": false}], \"count\": 1})",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid entity type or malformed entity ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new comment (general or inline) on any entity type (epic, user_story, acceptance_criteria, requirement). Supports threaded discussions through parent_comment_id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Create a new comment on an entity",
                "parameters": [
                    {
                        "enum": [
                            "epic",
                            "user_story",
                            "acceptance_criteria",
                            "requirement"
                        ],
                        "type": "string",
                        "description": "Entity type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Comment creation request",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created comment",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request - malformed entity ID, invalid entity type, missing required fields, or invalid inline comment data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found or parent comment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/{entityType}/{id}/comments/inline": {
            "post": {
                "description": "Create an inline comment linked to specific text positions within an entity's content. Requires linked_text, text_position_start, and text_position_end fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments",
                    "inline-comments"
                ],
                "summary": "Create an inline comment on specific text",
                "parameters": [
                    {
                        "enum": [
                            "epic",
                            "user_story",
                            "acceptance_criteria",
                            "requirement"
                        ],
                        "type": "string",
                        "description": "Entity type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Inline comment creation request with text position data",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created inline comment",
                        "schema": {
                            "$ref": "#/definitions/service.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request - missing inline comment data, invalid text positions, or empty linked text",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/{entityType}/{id}/comments/inline/validate": {
            "post": {
                "description": "Validate and update inline comment positions after entity text content has been modified. This ensures inline comments remain accurately positioned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments",
                    "inline-comments"
                ],
                "summary": "Validate inline comments after text changes",
                "parameters": [
                    {
                        "enum": [
                            "epic",
                            "user_story",
                            "acceptance_criteria",
                            "requirement"
                        ],
                        "type": "string",
                        "description": "Entity type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Text validation request",
                        "name": "validation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully validated inline comments\" example({\"message\": \"Inline comments validated successfully\"})",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid entity ID format or missing new_description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error during validation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/{entityType}/{id}/comments/inline/visible": {
            "get": {
                "description": "Retrieve all inline comments that are still valid (visible) for an entity, excluding those that may have become invalid due to text changes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments",
                    "inline-comments"
                ],
                "summary": "Get visible inline comments for an entity",
                "parameters": [
                    {
                        "enum": [
                            "epic",
                            "user_story",
                            "acceptance_criteria",
                            "requirement"
                        ],
                        "type": "string",
                        "description": "Entity type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved visible inline comments\" example({\"comments\": [{\"id\": \"123e4567-e89b-12d3-a456-426614174000\", \"linked_text\": \"OAuth 2.0 authentication\", \"text_position_start\": 45, \"text_position_end\": 67, \"content\": \"Need to clarify which OAuth flow to use\"}], \"count\": 1})",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid entity type or malformed entity ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change authenticated user's password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Password change request",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required or invalid current password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user with username and password to receive JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful authentication with JWT token",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get authenticated user's profile information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Get current user profile",
                "responses": {
                    "200": {
                        "description": "Current user profile",
                        "schema": {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of all users (Administrator role required)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/auth.UserResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Administrator role required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new user account (Administrator role required)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "schema": {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or role",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Administrator role required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Username or email already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get specific user details (Administrator role required)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Administrator role required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user details (Administrator role required)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user details",
                        "schema": {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or role",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Administrator role required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Username or email already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete user account (Administrator role required)",
                "tags": [
                    "authentication"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User successfully deleted"
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Administrator role required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Cannot delete user with associated entities",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.ChangePasswordRequest": {
            "description": "Request payload for changing user password (authentication required)",
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "description": "Current password for verification (required)",
                    "type": "string",
                    "example": "oldpassword123"
                },
                "new_password": {
                    "description": "New password (minimum 8 characters, required)",
                    "type": "string",
                    "minLength": 8,
                    "example": "newpassword456"
                }
            }
        },
        "auth.CreateUserRequest": {
            "description": "Request payload for creating a new user account (Administrator role required)",
            "type": "object",
            "required": [
                "email",
                "password",
                "role",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Valid email address (required)",
                    "type": "string",
                    "example": "jane@example.com"
                },
                "password": {
                    "description": "Password (minimum 8 characters, required)",
                    "type": "string",
                    "minLength": 8,
                    "example": "securepass123"
                },
                "role": {
                    "description": "User role: Administrator, User, or Commenter (required)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ],
                    "example": "User"
                },
                "username": {
                    "description": "Unique username (required)",
                    "type": "string",
                    "example": "jane_doe"
                }
            }
        },
        "auth.LoginRequest": {
            "description": "Request payload for user authentication",
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "Password for authentication",
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "description": "Username for authentication",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "auth.LoginResponse": {
            "description": "Response payload for successful authentication containing JWT token and user information",
            "type": "object",
            "properties": {
                "expires_at": {
                    "description": "Token expiration timestamp",
                    "type": "string",
                    "example": "2023-01-02T12:30:00Z"
                },
                "token": {
                    "description": "JWT authentication token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "description": "Authenticated user information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    ]
                }
            }
        },
        "auth.UpdateUserRequest": {
            "description": "Request payload for updating user information (Administrator role required)",
            "type": "object",
            "properties": {
                "email": {
                    "description": "New email address (optional, must be valid if provided)",
                    "type": "string",
                    "example": "jane.smith@example.com"
                },
                "role": {
                    "description": "New user role (optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ],
                    "example": "Administrator"
                },
                "username": {
                    "description": "New username (optional)",
                    "type": "string",
                    "example": "jane_smith"
                }
            }
        },
        "auth.UserResponse": {
            "description": "User information returned in API responses (password hash excluded for security)",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Account creation timestamp",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "email": {
                    "description": "User email address",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "id": {
                    "description": "Unique user identifier",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "role": {
                    "description": "User role determining permissions",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ],
                    "example": "User"
                },
                "updated_at": {
                    "description": "Last account update timestamp",
                    "type": "string",
                    "example": "2023-01-02T12:30:00Z"
                },
                "username": {
                    "description": "Unique username",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "handlers.DeleteAcceptanceCriteriaRequest": {
            "type": "object",
            "properties": {
                "force": {
                    "type": "boolean"
                }
            }
        },
        "handlers.DeleteEpicRequest": {
            "type": "object",
            "properties": {
                "force": {
                    "type": "boolean"
                }
            }
        },
        "handlers.DeleteRequirementRequest": {
            "type": "object",
            "properties": {
                "force": {
                    "type": "boolean"
                }
            }
        },
        "handlers.DeleteUserStoryRequest": {
            "type": "object",
            "properties": {
                "force": {
                    "type": "boolean"
                }
            }
        },
        "handlers.ErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/handlers.ErrorDetail"
                }
            }
        },
        "handlers.RelationshipTypeListResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "relationship_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RelationshipType"
                    }
                }
            }
        },
        "handlers.RequirementTypeListResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "requirement_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RequirementType"
                    }
                }
            }
        },
        "handlers.SearchSuggestionsResponse": {
            "type": "object",
            "properties": {
                "reference_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "titles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handlers.StatusListResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Status"
                    }
                }
            }
        },
        "handlers.StatusModelListResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "status_models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StatusModel"
                    }
                }
            }
        },
        "handlers.StatusTransitionListResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StatusTransition"
                    }
                }
            }
        },
        "models.AcceptanceCriteria": {
            "description": "Testable conditions that define when a user story is considered complete and acceptable",
            "type": "object",
            "required": [
                "description"
            ],
            "properties": {
                "author": {
                    "description": "User who authored this acceptance criteria",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "author_id": {
                    "description": "ID of the user who authored this acceptance criteria",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174002"
                },
                "comments": {
                    "description": "Comments associated with this acceptance criteria",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Comment"
                    }
                },
                "created_at": {
                    "description": "Timestamp when the acceptance criteria was created",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "description": {
                    "description": "EARS format description of the acceptance criteria",
                    "type": "string",
                    "example": "WHEN a user enters valid credentials THEN the system SHALL authenticate the user and redirect to the dashboard"
                },
                "id": {
                    "description": "Unique identifier for the acceptance criteria",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "last_modified": {
                    "description": "Timestamp when the acceptance criteria was last modified",
                    "type": "string",
                    "example": "2023-01-02T12:30:00Z"
                },
                "reference_id": {
                    "description": "Human-readable reference identifier",
                    "type": "string",
                    "example": "AC-001"
                },
                "requirements": {
                    "description": "Requirements linked to this acceptance criteria",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Requirement"
                    }
                },
                "user_story": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserStory"
                        }
                    ]
                },
                "user_story_id": {
                    "description": "ID of the parent user story",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174001"
                }
            }
        },
        "models.Comment": {
            "description": "A comment that can be attached to any entity, supporting both general and inline comments with threading",
            "type": "object",
            "required": [
                "content",
                "entity_type"
            ],
            "properties": {
                "author": {
                    "description": "User who authored this comment",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "author_id": {
                    "description": "ID of the user who authored this comment",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174003"
                },
                "content": {
                    "description": "Text content of the comment",
                    "type": "string",
                    "example": "This requirement needs clarification on the authentication flow."
                },
                "created_at": {
                    "description": "Timestamp when the comment was created",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "entity_id": {
                    "description": "ID of the entity this comment is attached to",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174001"
                },
                "entity_type": {
                    "description": "Type of entity this comment is attached to",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.EntityType"
                        }
                    ],
                    "example": "epic"
                },
                "id": {
                    "description": "Unique identifier for the comment",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "is_resolved": {
                    "description": "Whether this comment has been resolved",
                    "type": "boolean",
                    "example": false
                },
                "linked_text": {
                    "description": "For inline comments",
                    "type": "string",
                    "example": "OAuth 2.0 authentication flow"
                },
                "parent_comment": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Comment"
                        }
                    ]
                },
                "parent_comment_id": {
                    "description": "Optional ID of parent comment for threaded discussions",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174002"
                },
                "replies": {
                    "description": "Replies to this comment",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Comment"
                    }
                },
                "text_position_end": {
                    "description": "End position of linked text for inline comments",
                    "type": "integer",
                    "example": 73
                },
                "text_position_start": {
                    "description": "Start position of linked text for inline comments",
                    "type": "integer",
                    "example": 45
                },
                "updated_at": {
                    "description": "Timestamp when the comment was last updated",
                    "type": "string",
                    "example": "2023-01-02T12:30:00Z"
                }
            }
        },
        "models.EntityType": {
            "description": "Type of entity that can receive comments in the system",
            "type": "string",
            "enum": [
                "epic",
                "user_story",
                "acceptance_criteria",
                "requirement"
            ],
            "x-enum-comments": {
                "EntityTypeAcceptanceCriteria": "Acceptance Criteria - testable conditions for user stories",
                "EntityTypeEpic": "Epic - top-level feature container",
                "EntityTypeRequirement": "Requirement - detailed technical requirement",
                "EntityTypeUserStory": "User Story - feature requirement within an epic"
            },
            "x-enum-descriptions": [
                "Epic - top-level feature container",
                "User Story - feature requirement within an epic",
                "Acceptance Criteria - testable conditions for user stories",
                "Requirement - detailed technical requirement"
            ],
            "x-enum-varnames": [
                "EntityTypeEpic",
                "EntityTypeUserStory",
                "EntityTypeAcceptanceCriteria",
                "EntityTypeRequirement"
            ]
        },
        "models.Epic": {
            "description": "Epic is a large body of work that can be broken down into smaller user stories. It represents a significant feature or initiative that delivers business value.",
            "type": "object",
            "required": [
                "priority",
                "status",
                "title"
            ],
            "properties": {
                "assignee": {
                    "description": "Assignee contains the user information of who is assigned to the epic\n@Description User currently assigned to this epic (populated when requested with ?include=assignee)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "assignee_id": {
                    "description": "AssigneeID is the UUID of the user assigned to the epic\n@Description UUID of the user currently assigned to work on this epic\n@Example \"123e4567-e89b-12d3-a456-426614174002\"",
                    "type": "string"
                },
                "comments": {
                    "description": "Comments contains all comments associated with this epic\n@Description List of comments on this epic (populated when requested with ?include=comments)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Comment"
                    }
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the epic was created\n@Description Timestamp when the epic was created (RFC3339 format)\n@Example \"2023-01-15T10:30:00Z\"",
                    "type": "string"
                },
                "creator": {
                    "description": "Creator contains the user information of who created the epic\n@Description User who created this epic (populated when requested with ?include=creator)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "creator_id": {
                    "description": "CreatorID is the UUID of the user who created the epic\n@Description UUID of the user who created this epic\n@Example \"123e4567-e89b-12d3-a456-426614174001\"",
                    "type": "string"
                },
                "description": {
                    "description": "Description provides detailed information about the epic\n@Description Detailed description of the epic's purpose and scope (optional, max 5000 characters)\n@MaxLength 5000\n@Example \"Implement a comprehensive user authentication and authorization system with JWT tokens, role-based access control, and secure password management.\"",
                    "type": "string",
                    "maxLength": 5000
                },
                "id": {
                    "description": "ID is the unique identifier for the epic\n@Description Unique UUID identifier for the epic\n@Example \"123e4567-e89b-12d3-a456-426614174000\"",
                    "type": "string"
                },
                "last_modified": {
                    "description": "LastModified is the timestamp when the epic was last updated\n@Description Timestamp when the epic was last modified (RFC3339 format)\n@Example \"2023-01-16T14:45:30Z\"",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority indicates the importance level of the epic\n@Description Priority level of the epic (1=Critical, 2=High, 3=Medium, 4=Low)\n@Minimum 1\n@Maximum 4\n@Example 1",
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Priority"
                        }
                    ]
                },
                "reference_id": {
                    "description": "ReferenceID is the human-readable identifier for the epic\n@Description Human-readable reference identifier (auto-generated, format: EP-XXX)\n@Example \"EP-001\"",
                    "type": "string"
                },
                "status": {
                    "description": "Status represents the current workflow state of the epic\n@Description Current status of the epic in the workflow\n@Enum Backlog,Draft,In Progress,Done,Cancelled\n@Example \"Backlog\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.EpicStatus"
                        }
                    ]
                },
                "title": {
                    "description": "Title is the name/summary of the epic\n@Description Title or name of the epic (required, max 500 characters)\n@MaxLength 500\n@Example \"User Authentication System\"",
                    "type": "string",
                    "maxLength": 500
                },
                "user_stories": {
                    "description": "UserStories contains all user stories that belong to this epic\n@Description List of user stories that belong to this epic (populated when requested with ?include=user_stories)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserStory"
                    }
                }
            }
        },
        "models.EpicStatus": {
            "description": "Status of an epic in the workflow lifecycle",
            "type": "string",
            "enum": [
                "Backlog",
                "Draft",
                "In Progress",
                "Done",
                "Cancelled"
            ],
            "x-enum-comments": {
                "EpicStatusBacklog": "Epic is in the backlog - not yet started, awaiting prioritization",
                "EpicStatusCancelled": "Epic has been cancelled - will not be implemented",
                "EpicStatusDone": "Epic is completed - all user stories finished",
                "EpicStatusDraft": "Epic is in draft state - being defined and refined",
                "EpicStatusInProgress": "Epic is being actively worked on"
            },
            "x-enum-descriptions": [
                "Epic is in the backlog - not yet started, awaiting prioritization",
                "Epic is in draft state - being defined and refined",
                "Epic is being actively worked on",
                "Epic is completed - all user stories finished",
                "Epic has been cancelled - will not be implemented"
            ],
            "x-enum-varnames": [
                "EpicStatusBacklog",
                "EpicStatusDraft",
                "EpicStatusInProgress",
                "EpicStatusDone",
                "EpicStatusCancelled"
            ]
        },
        "models.Priority": {
            "description": "Priority level for entities (1=Critical, 2=High, 3=Medium, 4=Low)",
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4
            ],
            "x-enum-comments": {
                "PriorityCritical": "Critical priority - highest urgency, immediate attention required",
                "PriorityHigh": "High priority - important, should be addressed soon",
                "PriorityLow": "Low priority - nice to have, can be deferred",
                "PriorityMedium": "Medium priority - normal importance, standard timeline"
            },
            "x-enum-descriptions": [
                "Critical priority - highest urgency, immediate attention required",
                "High priority - important, should be addressed soon",
                "Medium priority - normal importance, standard timeline",
                "Low priority - nice to have, can be deferred"
            ],
            "x-enum-varnames": [
                "PriorityCritical",
                "PriorityHigh",
                "PriorityMedium",
                "PriorityLow"
            ]
        },
        "models.RelationshipType": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "requirement_relationships": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RequirementRelationship"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Requirement": {
            "description": "A detailed requirement that specifies what needs to be implemented within a user story",
            "type": "object",
            "required": [
                "priority",
                "status",
                "title"
            ],
            "properties": {
                "acceptance_criteria": {
                    "description": "Optional linked acceptance criteria",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AcceptanceCriteria"
                        }
                    ]
                },
                "acceptance_criteria_id": {
                    "description": "Optional ID of linked acceptance criteria",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174002"
                },
                "assignee": {
                    "description": "User assigned to implement this requirement",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "assignee_id": {
                    "description": "ID of the user assigned to implement the requirement",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174004"
                },
                "comments": {
                    "description": "Comments associated with this requirement",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Comment"
                    }
                },
                "created_at": {
                    "description": "Timestamp when the requirement was created",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "creator": {
                    "description": "User who created this requirement",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "creator_id": {
                    "description": "ID of the user who created the requirement",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174003"
                },
                "description": {
                    "description": "Detailed description of the requirement",
                    "type": "string",
                    "example": "The system shall support OAuth 2.0 authentication flow with support for Google, GitHub, and Microsoft providers. The implementation must handle token refresh and provide secure session management."
                },
                "id": {
                    "description": "Unique identifier for the requirement",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "last_modified": {
                    "description": "Timestamp when the requirement was last modified",
                    "type": "string",
                    "example": "2023-01-02T12:30:00Z"
                },
                "priority": {
                    "description": "Priority level (1=Critical, 2=High, 3=Medium, 4=Low)",
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Priority"
                        }
                    ],
                    "example": 2
                },
                "reference_id": {
                    "description": "Human-readable reference identifier",
                    "type": "string",
                    "example": "REQ-001"
                },
                "source_relationships": {
                    "description": "Relationships where this requirement is the source",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RequirementRelationship"
                    }
                },
                "status": {
                    "description": "Current status of the requirement",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RequirementStatus"
                        }
                    ],
                    "example": "Draft"
                },
                "target_relationships": {
                    "description": "Relationships where this requirement is the target",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RequirementRelationship"
                    }
                },
                "title": {
                    "description": "Brief title describing the requirement",
                    "type": "string",
                    "maxLength": 500,
                    "example": "User authentication must support OAuth 2.0"
                },
                "type": {
                    "description": "Type classification of this requirement",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RequirementType"
                        }
                    ]
                },
                "type_id": {
                    "description": "ID of the requirement type (Functional, Non-Functional, etc.)",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174005"
                },
                "user_story": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserStory"
                        }
                    ]
                },
                "user_story_id": {
                    "description": "ID of the parent user story",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174001"
                }
            }
        },
        "models.RequirementRelationship": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "creator": {
                    "$ref": "#/definitions/models.User"
                },
                "id": {
                    "type": "string"
                },
                "relationship_type": {
                    "$ref": "#/definitions/models.RelationshipType"
                },
                "relationship_type_id": {
                    "type": "string"
                },
                "source_requirement": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Requirement"
                        }
                    ]
                },
                "source_requirement_id": {
                    "type": "string"
                },
                "target_requirement": {
                    "$ref": "#/definitions/models.Requirement"
                },
                "target_requirement_id": {
                    "type": "string"
                }
            }
        },
        "models.RequirementStatus": {
            "description": "Status of a requirement in the workflow lifecycle",
            "type": "string",
            "enum": [
                "Draft",
                "Active",
                "Obsolete"
            ],
            "x-enum-comments": {
                "RequirementStatusActive": "Active - requirement is approved and being implemented",
                "RequirementStatusDraft": "Draft - requirement is being written and refined",
                "RequirementStatusObsolete": "Obsolete - requirement is no longer needed or has been superseded"
            },
            "x-enum-descriptions": [
                "Draft - requirement is being written and refined",
                "Active - requirement is approved and being implemented",
                "Obsolete - requirement is no longer needed or has been superseded"
            ],
            "x-enum-varnames": [
                "RequirementStatusDraft",
                "RequirementStatusActive",
                "RequirementStatusObsolete"
            ]
        },
        "models.RequirementType": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "requirements": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Requirement"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Status": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "Hex color code for UI display",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "from_transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StatusTransition"
                    }
                },
                "id": {
                    "type": "string"
                },
                "is_final": {
                    "type": "boolean"
                },
                "is_initial": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "status_model": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.StatusModel"
                        }
                    ]
                },
                "status_model_id": {
                    "type": "string"
                },
                "to_transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StatusTransition"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.StatusModel": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "entity_type": {
                    "$ref": "#/definitions/models.EntityType"
                },
                "id": {
                    "type": "string"
                },
                "is_default": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "statuses": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Status"
                    }
                },
                "transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StatusTransition"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.StatusTransition": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "Optional description",
                    "type": "string"
                },
                "from_status": {
                    "$ref": "#/definitions/models.Status"
                },
                "from_status_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Optional name for the transition",
                    "type": "string"
                },
                "status_model": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.StatusModel"
                        }
                    ]
                },
                "status_model_id": {
                    "type": "string"
                },
                "to_status": {
                    "$ref": "#/definitions/models.Status"
                },
                "to_status_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "description": "A user account in the system with authentication and role-based permissions",
            "type": "object",
            "required": [
                "email",
                "role",
                "username"
            ],
            "properties": {
                "created_at": {
                    "description": "Timestamp when the user account was created",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "email": {
                    "description": "Unique email address for login and notifications",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "id": {
                    "description": "Unique identifier for the user",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "role": {
                    "description": "User role determining permissions",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ],
                    "example": "User"
                },
                "updated_at": {
                    "description": "Timestamp when the user account was last updated",
                    "type": "string",
                    "example": "2023-01-02T12:30:00Z"
                },
                "username": {
                    "description": "Unique username for login",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "john_doe"
                }
            }
        },
        "models.UserRole": {
            "description": "Role that determines user permissions and access levels in the system",
            "type": "string",
            "enum": [
                "Administrator",
                "User",
                "Commenter"
            ],
            "x-enum-comments": {
                "RoleAdministrator": "Administrator - full system access including user and configuration management",
                "RoleCommenter": "Commenter - can only add comments, limited editing capabilities",
                "RoleUser": "User - can create, edit, and delete entities"
            },
            "x-enum-descriptions": [
                "Administrator - full system access including user and configuration management",
                "User - can create, edit, and delete entities",
                "Commenter - can only add comments, limited editing capabilities"
            ],
            "x-enum-varnames": [
                "RoleAdministrator",
                "RoleUser",
                "RoleCommenter"
            ]
        },
        "models.UserStory": {
            "description": "User story is a short, simple description of a feature told from the perspective of the person who desires the new capability. It belongs to an epic and can have multiple acceptance criteria and requirements.",
            "type": "object",
            "required": [
                "priority",
                "status",
                "title"
            ],
            "properties": {
                "acceptance_criteria": {
                    "description": "AcceptanceCriteria contains all acceptance criteria that belong to this user story\n@Description List of acceptance criteria that define when this user story is considered complete (populated when requested with ?include=acceptance_criteria)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AcceptanceCriteria"
                    }
                },
                "assignee": {
                    "description": "Assignee contains the user information of who is assigned to the user story\n@Description User currently assigned to this user story (populated when requested with ?include=assignee)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "assignee_id": {
                    "description": "AssigneeID is the UUID of the user assigned to the user story\n@Description UUID of the user currently assigned to work on this user story\n@Example \"123e4567-e89b-12d3-a456-426614174003\"",
                    "type": "string"
                },
                "comments": {
                    "description": "Comments contains all comments associated with this user story\n@Description List of comments on this user story (populated when requested with ?include=comments)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Comment"
                    }
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the user story was created\n@Description Timestamp when the user story was created (RFC3339 format)\n@Example \"2023-01-15T10:30:00Z\"",
                    "type": "string"
                },
                "creator": {
                    "description": "Creator contains the user information of who created the user story\n@Description User who created this user story (populated when requested with ?include=creator)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "creator_id": {
                    "description": "CreatorID is the UUID of the user who created the user story\n@Description UUID of the user who created this user story\n@Example \"123e4567-e89b-12d3-a456-426614174002\"",
                    "type": "string"
                },
                "description": {
                    "description": "Description provides detailed information about the user story\n@Description Detailed description of the user story, preferably in the format 'As [role], I want [function], so that [goal]' (optional, max 2000 characters)\n@MaxLength 2000\n@Example \"As a registered user, I want to log in with my email and password, so that I can access my personalized dashboard and account features.\"",
                    "type": "string",
                    "maxLength": 2000
                },
                "epic": {
                    "description": "Relationships\nEpic contains the epic information this user story belongs to\n@Description Epic that contains this user story (populated when requested with ?include=epic)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Epic"
                        }
                    ]
                },
                "epic_id": {
                    "description": "EpicID is the UUID of the epic this user story belongs to\n@Description UUID of the epic that contains this user story\n@Example \"123e4567-e89b-12d3-a456-426614174001\"",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the user story\n@Description Unique UUID identifier for the user story\n@Example \"123e4567-e89b-12d3-a456-426614174000\"",
                    "type": "string"
                },
                "last_modified": {
                    "description": "LastModified is the timestamp when the user story was last updated\n@Description Timestamp when the user story was last modified (RFC3339 format)\n@Example \"2023-01-16T14:45:30Z\"",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority indicates the importance level of the user story\n@Description Priority level of the user story (1=Critical, 2=High, 3=Medium, 4=Low)\n@Minimum 1\n@Maximum 4\n@Example 2",
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Priority"
                        }
                    ]
                },
                "reference_id": {
                    "description": "ReferenceID is the human-readable identifier for the user story\n@Description Human-readable reference identifier (auto-generated, format: US-XXX)\n@Example \"US-001\"",
                    "type": "string"
                },
                "requirements": {
                    "description": "Requirements contains all requirements that belong to this user story\n@Description List of detailed requirements that belong to this user story (populated when requested with ?include=requirements)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Requirement"
                    }
                },
                "status": {
                    "description": "Status represents the current workflow state of the user story\n@Description Current status of the user story in the workflow\n@Enum Backlog,Draft,In Progress,Done,Cancelled\n@Example \"Backlog\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserStoryStatus"
                        }
                    ]
                },
                "title": {
                    "description": "Title is the name/summary of the user story\n@Description Title or name of the user story (required, max 500 characters)\n@MaxLength 500\n@Example \"User Login with Email and Password\"",
                    "type": "string",
                    "maxLength": 500
                }
            }
        },
        "models.UserStoryStatus": {
            "description": "Status of a user story in the workflow lifecycle",
            "type": "string",
            "enum": [
                "Backlog",
                "Draft",
                "In Progress",
                "Done",
                "Cancelled"
            ],
            "x-enum-comments": {
                "UserStoryStatusBacklog": "User story is in the backlog - not yet started, awaiting prioritization",
                "UserStoryStatusCancelled": "User story has been cancelled and will not be implemented",
                "UserStoryStatusDone": "User story has been completed and meets acceptance criteria",
                "UserStoryStatusDraft": "User story is being drafted - requirements are being defined",
                "UserStoryStatusInProgress": "User story is actively being worked on"
            },
            "x-enum-descriptions": [
                "User story is in the backlog - not yet started, awaiting prioritization",
                "User story is being drafted - requirements are being defined",
                "User story is actively being worked on",
                "User story has been completed and meets acceptance criteria",
                "User story has been cancelled and will not be implemented"
            ],
            "x-enum-varnames": [
                "UserStoryStatusBacklog",
                "UserStoryStatusDraft",
                "UserStoryStatusInProgress",
                "UserStoryStatusDone",
                "UserStoryStatusCancelled"
            ]
        },
        "service.AssignEpicRequest": {
            "description": "Request payload for assigning an epic to a user",
            "type": "object",
            "required": [
                "assignee_id"
            ],
            "properties": {
                "assignee_id": {
                    "description": "AssigneeID is the UUID of the user to assign the epic to\n@Description UUID of the user to assign this epic to\n@Example \"123e4567-e89b-12d3-a456-426614174002\"",
                    "type": "string"
                }
            }
        },
        "service.CascadeDeletePreview": {
            "type": "object",
            "properties": {
                "entity_id": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "reference_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "service.CascadeDeletedEntity": {
            "type": "object",
            "properties": {
                "entity_id": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "reference_id": {
                    "type": "string"
                }
            }
        },
        "service.ChangeEpicStatusRequest": {
            "description": "Request payload for changing an epic's status",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "description": "Status is the new workflow state for the epic\n@Description New status for the epic\n@Enum Backlog,Draft,In Progress,Done,Cancelled\n@Example \"In Progress\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.EpicStatus"
                        }
                    ]
                }
            }
        },
        "service.CommentResponse": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/models.User"
                },
                "author_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "depth": {
                    "type": "integer"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_type": {
                    "$ref": "#/definitions/models.EntityType"
                },
                "id": {
                    "type": "string"
                },
                "is_inline": {
                    "type": "boolean"
                },
                "is_reply": {
                    "type": "boolean"
                },
                "is_resolved": {
                    "type": "boolean"
                },
                "linked_text": {
                    "type": "string"
                },
                "parent_comment_id": {
                    "type": "string"
                },
                "replies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.CommentResponse"
                    }
                },
                "text_position_end": {
                    "type": "integer"
                },
                "text_position_start": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "service.CreateAcceptanceCriteriaRequest": {
            "type": "object",
            "required": [
                "author_id",
                "description"
            ],
            "properties": {
                "author_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "user_story_id": {
                    "type": "string"
                }
            }
        },
        "service.CreateCommentRequest": {
            "type": "object",
            "required": [
                "author_id"
            ],
            "properties": {
                "author_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_type": {
                    "$ref": "#/definitions/models.EntityType"
                },
                "linked_text": {
                    "type": "string"
                },
                "parent_comment_id": {
                    "type": "string"
                },
                "text_position_end": {
                    "type": "integer"
                },
                "text_position_start": {
                    "type": "integer"
                }
            }
        },
        "service.CreateEpicRequest": {
            "description": "Request payload for creating a new epic",
            "type": "object",
            "required": [
                "creator_id",
                "priority",
                "title"
            ],
            "properties": {
                "assignee_id": {
                    "description": "AssigneeID is the UUID of the user to assign the epic to (optional, defaults to creator)\n@Description UUID of the user to assign this epic to (optional, defaults to creator if not provided)\n@Example \"123e4567-e89b-12d3-a456-426614174002\"",
                    "type": "string"
                },
                "creator_id": {
                    "description": "CreatorID is the UUID of the user creating the epic\n@Description UUID of the user who is creating this epic (required)\n@Example \"123e4567-e89b-12d3-a456-426614174001\"",
                    "type": "string"
                },
                "description": {
                    "description": "Description provides detailed information about the epic\n@Description Detailed description of the epic's purpose and scope (optional, max 5000 characters)\n@MaxLength 5000\n@Example \"Implement a comprehensive user authentication and authorization system with JWT tokens, role-based access control, and secure password management.\"",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority is the importance level of the epic\n@Description Priority level of the epic (1=Critical, 2=High, 3=Medium, 4=Low)\n@Minimum 1\n@Maximum 4\n@Example 1",
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Priority"
                        }
                    ]
                },
                "title": {
                    "description": "Title is the name/summary of the epic\n@Description Title or name of the epic (required, max 500 characters)\n@MaxLength 500\n@Example \"User Authentication System\"",
                    "type": "string",
                    "maxLength": 500
                }
            }
        },
        "service.CreateRelationshipRequest": {
            "type": "object",
            "required": [
                "created_by",
                "relationship_type_id",
                "source_requirement_id",
                "target_requirement_id"
            ],
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "relationship_type_id": {
                    "type": "string"
                },
                "source_requirement_id": {
                    "type": "string"
                },
                "target_requirement_id": {
                    "type": "string"
                }
            }
        },
        "service.CreateRelationshipTypeRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "service.CreateRequirementRequest": {
            "type": "object",
            "required": [
                "creator_id",
                "priority",
                "title",
                "type_id",
                "user_story_id"
            ],
            "properties": {
                "acceptance_criteria_id": {
                    "type": "string"
                },
                "assignee_id": {
                    "type": "string"
                },
                "creator_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "priority": {
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Priority"
                        }
                    ]
                },
                "title": {
                    "type": "string",
                    "maxLength": 500
                },
                "type_id": {
                    "type": "string"
                },
                "user_story_id": {
                    "type": "string"
                }
            }
        },
        "service.CreateRequirementTypeRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "service.CreateStatusModelRequest": {
            "type": "object",
            "required": [
                "entity_type",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "entity_type": {
                    "$ref": "#/definitions/models.EntityType"
                },
                "is_default": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "service.CreateStatusRequest": {
            "type": "object",
            "required": [
                "name",
                "status_model_id"
            ],
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "is_final": {
                    "type": "boolean"
                },
                "is_initial": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "order": {
                    "type": "integer"
                },
                "status_model_id": {
                    "type": "string"
                }
            }
        },
        "service.CreateStatusTransitionRequest": {
            "type": "object",
            "required": [
                "from_status_id",
                "status_model_id",
                "to_status_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "from_status_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status_model_id": {
                    "type": "string"
                },
                "to_status_id": {
                    "type": "string"
                }
            }
        },
        "service.CreateUserStoryRequest": {
            "description": "Request structure for creating a new user story",
            "type": "object",
            "required": [
                "creator_id",
                "priority",
                "title"
            ],
            "properties": {
                "assignee_id": {
                    "description": "AssigneeID is the UUID of the user assigned to the user story\n@Description UUID of the user to assign this user story to (optional, defaults to creator)\n@Example \"123e4567-e89b-12d3-a456-426614174002\"",
                    "type": "string"
                },
                "creator_id": {
                    "description": "CreatorID is the UUID of the user creating the user story\n@Description UUID of the user who is creating this user story (required)\n@Example \"123e4567-e89b-12d3-a456-426614174001\"",
                    "type": "string"
                },
                "description": {
                    "description": "Description provides detailed information about the user story\n@Description Detailed description following the template 'As [role], I want [function], so that [goal]' (optional, max 2000 characters)\n@MaxLength 2000\n@Example \"As a registered user, I want to log in with my email and password, so that I can access my personalized dashboard and account features.\"",
                    "type": "string"
                },
                "epic_id": {
                    "description": "EpicID is the UUID of the epic this user story belongs to\n@Description UUID of the epic that will contain this user story (required for direct creation)\n@Example \"123e4567-e89b-12d3-a456-426614174000\"",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority indicates the importance level of the user story\n@Description Priority level of the user story (1=Critical, 2=High, 3=Medium, 4=Low)\n@Minimum 1\n@Maximum 4\n@Example 2",
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Priority"
                        }
                    ]
                },
                "title": {
                    "description": "Title is the name/summary of the user story\n@Description Title or name of the user story (required, max 500 characters)\n@MaxLength 500\n@Example \"User Login with Email and Password\"",
                    "type": "string",
                    "maxLength": 500
                }
            }
        },
        "service.DeletionResult": {
            "type": "object",
            "properties": {
                "audit_log_id": {
                    "type": "string"
                },
                "cascade_deleted": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.CascadeDeletedEntity"
                    }
                },
                "deleted_at": {
                    "type": "string"
                },
                "deleted_by": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "reference_id": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                }
            }
        },
        "service.DependencyDetail": {
            "type": "object",
            "properties": {
                "entity_id": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "reference_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "service.DependencyInfo": {
            "type": "object",
            "properties": {
                "can_delete": {
                    "type": "boolean"
                },
                "cascade_delete_count": {
                    "type": "integer"
                },
                "cascade_delete_entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.CascadeDeletePreview"
                    }
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.DependencyDetail"
                    }
                },
                "requires_confirmation": {
                    "type": "boolean"
                }
            }
        },
        "service.SearchResponse": {
            "type": "object",
            "properties": {
                "executed_at": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "query": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.SearchResult"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.SearchResult": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "reference_id": {
                    "type": "string"
                },
                "relevance": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "epic, user_story, acceptance_criteria, requirement",
                    "type": "string"
                }
            }
        },
        "service.UpdateAcceptanceCriteriaRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            }
        },
        "service.UpdateCommentRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                }
            }
        },
        "service.UpdateEpicRequest": {
            "description": "Request payload for updating an existing epic (all fields are optional)",
            "type": "object",
            "properties": {
                "assignee_id": {
                    "description": "AssigneeID is the UUID of the user to assign the epic to\n@Description UUID of the user to assign this epic to (optional)\n@Example \"123e4567-e89b-12d3-a456-426614174002\"",
                    "type": "string"
                },
                "description": {
                    "description": "Description provides detailed information about the epic\n@Description Detailed description of the epic's purpose and scope (optional, max 5000 characters)\n@MaxLength 5000\n@Example \"Enhanced implementation with multi-factor authentication and advanced security features.\"",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority is the importance level of the epic\n@Description Priority level of the epic (1=Critical, 2=High, 3=Medium, 4=Low) (optional)\n@Minimum 1\n@Maximum 4\n@Example 2",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Priority"
                        }
                    ]
                },
                "status": {
                    "description": "Status is the workflow state of the epic\n@Description Current status of the epic in the workflow (optional)\n@Enum Backlog,Draft,In Progress,Done,Cancelled\n@Example \"In Progress\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.EpicStatus"
                        }
                    ]
                },
                "title": {
                    "description": "Title is the name/summary of the epic\n@Description Title or name of the epic (optional, max 500 characters)\n@MaxLength 500\n@Example \"Enhanced User Authentication System\"",
                    "type": "string"
                }
            }
        },
        "service.UpdateRelationshipTypeRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "service.UpdateRequirementRequest": {
            "type": "object",
            "properties": {
                "acceptance_criteria_id": {
                    "type": "string"
                },
                "assignee_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "priority": {
                    "$ref": "#/definitions/models.Priority"
                },
                "status": {
                    "$ref": "#/definitions/models.RequirementStatus"
                },
                "title": {
                    "type": "string"
                },
                "type_id": {
                    "type": "string"
                }
            }
        },
        "service.UpdateRequirementTypeRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "service.UpdateStatusModelRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "is_default": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "service.UpdateStatusRequest": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "is_final": {
                    "type": "boolean"
                },
                "is_initial": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "order": {
                    "type": "integer"
                }
            }
        },
        "service.UpdateStatusTransitionRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "service.UpdateUserStoryRequest": {
            "description": "Request structure for updating an existing user story (all fields are optional)",
            "type": "object",
            "properties": {
                "assignee_id": {
                    "description": "AssigneeID is the UUID of the user to assign the user story to\n@Description UUID of the user to assign this user story to (optional)\n@Example \"123e4567-e89b-12d3-a456-426614174002\"",
                    "type": "string"
                },
                "description": {
                    "description": "Description provides detailed information about the user story\n@Description Detailed description following the template 'As [role], I want [function], so that [goal]' (optional, max 2000 characters)\n@MaxLength 2000\n@Example \"As a security-conscious user, I want to enable two-factor authentication on my account, so that I can protect my personal information from unauthorized access.\"",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority indicates the importance level of the user story\n@Description Priority level of the user story (1=Critical, 2=High, 3=Medium, 4=Low) (optional)\n@Minimum 1\n@Maximum 4\n@Example 3",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Priority"
                        }
                    ]
                },
                "status": {
                    "description": "Status represents the current workflow state of the user story\n@Description Current status of the user story in the workflow (optional)\n@Enum Backlog,Draft,In Progress,Done,Cancelled\n@Example \"In Progress\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserStoryStatus"
                        }
                    ]
                },
                "title": {
                    "description": "Title is the name/summary of the user story\n@Description Title or name of the user story (optional, max 500 characters)\n@MaxLength 500\n@Example \"Enhanced User Login with Two-Factor Authentication\"",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT token authentication. Include 'Bearer ' followed by your JWT token. Example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' Tokens expire after 1 hour and must be refreshed through re-authentication.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Epic management endpoints for high-level features and initiatives. Epics serve as containers for user stories and provide project-level organization.",
            "name": "epics"
        },
        {
            "description": "User story management within epics. User stories represent feature requirements from the user perspective and contain acceptance criteria and detailed requirements.",
            "name": "user-stories"
        },
        {
            "description": "Acceptance criteria management for user stories. Define testable conditions that must be met for user story completion using EARS format (Easy Approach to Requirements Syntax).",
            "name": "acceptance-criteria"
        },
        {
            "description": "Detailed requirement management with relationship mapping. Requirements provide technical specifications and can be linked with various relationship types (depends_on, blocks, relates_to, conflicts_with, derives_from).",
            "name": "requirements"
        },
        {
            "description": "Comment system for collaboration and feedback. Supports both general comments and inline comments with threading, resolution tracking, and entity associations.",
            "name": "comments"
        },
        {
            "description": "Full-text search capabilities across all entities. Provides advanced filtering, sorting, and suggestion features for efficient content discovery.",
            "name": "search"
        },
        {
            "description": "Hierarchical navigation and entity relationship endpoints. Retrieve entity hierarchies, paths, and relationship structures for navigation interfaces.",
            "name": "navigation"
        },
        {
            "description": "System configuration management for requirement types, relationship types, and status models. Administrative endpoints for customizing system behavior and workflows.",
            "name": "configuration"
        },
        {
            "description": "Comprehensive deletion management with dependency validation. Provides safe deletion with cascade options and dependency impact analysis.",
            "name": "deletion"
        },
        {
            "description": "System health and monitoring endpoints for service status, database connectivity, and operational metrics.",
            "name": "health"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Product Requirements Management API",
	Description:      "Comprehensive API for managing product requirements through hierarchical structure of Epics → User Stories → Requirements. Features include full-text search, comment system, relationship mapping, and configurable workflows.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
