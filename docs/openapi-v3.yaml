openapi: 3.0.3
info:
  title: Product Requirements Management API
  description: |
    Comprehensive API for managing product requirements through hierarchical structure of Epics → User Stories → Requirements. 
    Features include full-text search, comment system, relationship mapping, and configurable workflows.
  version: 1.0.0
  contact:
    name: API Support
    url: http://www.swagger.io/support
    email: support@swagger.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.requirements.example.com
    description: Production server

security:
  - BearerAuth: []

paths:
  # Health Check endpoints (Public)
  /ready:
    get:
      tags: [Health]
      summary: Readiness check
      description: Check if the application is ready to serve requests
      security: []
      responses:
        '200':
          description: Application is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        '503':
          description: Application is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'

  /live:
    get:
      tags: [Health]
      summary: Liveness check
      description: Check if the application is alive
      security: []
      responses:
        '200':
          description: Application is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'

  # Authentication endpoints
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and receive JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags: [Authentication]
      summary: Get current user profile
      description: Get the profile information of the currently authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/change-password:
    post:
      tags: [Authentication]
      summary: Change user password
      description: Change the password for the currently authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Management (Admin Only)
  /auth/users:
    post:
      tags: [Authentication, User Management]
      summary: Create user (Admin only)
      description: Create a new user account
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    get:
      tags: [Authentication, User Management]
      summary: List users (Admin only)
      description: Get list of all users
      x-required-role: Administrator
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /auth/users/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Authentication, User Management]
      summary: Get user by ID (Admin only)
      description: Get user details by ID
      x-required-role: Administrator
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Authentication, User Management]
      summary: Update user (Admin only)
      description: Update user information
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Authentication, User Management]
      summary: Delete user (Admin only)
      description: Delete user account
      x-required-role: Administrator
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Epic endpoints
  /api/v1/epics:
    get:
      tags: [Epics]
      summary: List epics
      parameters:
        - $ref: '#/components/parameters/CreatorIdParam'
        - $ref: '#/components/parameters/AssigneeIdParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/EpicStatus'
        - $ref: '#/components/parameters/PriorityParam'
        - $ref: '#/components/parameters/OrderByParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/IncludeParam'
      responses:
        '200':
          description: List of epics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpicListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Epics]
      summary: Create epic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEpicRequest'
      responses:
        '201':
          description: Epic created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/epics/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Epics]
      summary: Get epic by ID
      responses:
        '200':
          description: Epic details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Epics]
      summary: Update epic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEpicRequest'
      responses:
        '200':
          description: Epic updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'

    delete:
      tags: [Epics]
      summary: Delete epic
      responses:
        '204':
          description: Epic deleted
        '409':
          description: Cannot delete due to dependencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/epics/{id}/user-stories:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Epics]
      summary: Get epic with user stories
      responses:
        '200':
          description: Epic with user stories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'

    post:
      tags: [Epics]
      summary: Create user story in epic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserStoryRequest'
      responses:
        '201':
          description: User story created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'

  /api/v1/epics/{id}/status:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    patch:
      tags: [Epics]
      summary: Change epic status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
      responses:
        '200':
          description: Status changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'

  /api/v1/epics/{id}/assign:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    patch:
      tags: [Epics]
      summary: Assign epic to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentRequest'
      responses:
        '200':
          description: Epic assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'

  /api/v1/epics/{id}/validate-deletion:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Epics]
      summary: Validate epic deletion
      description: Check if epic can be deleted and get dependency information
      responses:
        '200':
          description: Deletion validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyInfo'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/epics/{id}/delete:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    delete:
      tags: [Epics]
      summary: Comprehensive epic deletion
      description: Delete epic with all dependencies and cascade operations
      responses:
        '200':
          description: Deletion completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletionResult'
        '409':
          description: Cannot delete due to dependencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/epics/{id}/comments:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Epics, Comments]
      summary: Get epic comments
      description: Retrieve all comments associated with a specific epic, including both general and inline comments
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of epic comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags: [Epics, Comments]
      summary: Create epic comment
      description: Create a new general comment on an epic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/epics/{id}/comments/inline:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    post:
      tags: [Epics, Comments]
      summary: Create epic inline comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInlineCommentRequest'
      responses:
        '201':
          description: Inline comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /api/v1/epics/{id}/comments/inline/visible:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Epics, Comments]
      summary: Get visible epic inline comments
      responses:
        '200':
          description: List of visible inline comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'

  /api/v1/epics/{id}/comments/inline/validate:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    post:
      tags: [Epics, Comments]
      summary: Validate epic inline comments
      description: Validate that inline comment positions are still valid against the current epic content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineCommentValidationRequest'
      responses:
        '200':
          description: Validation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'

  # User Story endpoints
  /api/v1/user-stories:
    get:
      tags: [User Stories]
      summary: List user stories
      parameters:
        - name: epic_id
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/CreatorIdParam'
        - $ref: '#/components/parameters/AssigneeIdParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStoryStatus'
        - $ref: '#/components/parameters/PriorityParam'
        - $ref: '#/components/parameters/OrderByParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/IncludeParam'
      responses:
        '200':
          description: List of user stories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStoryListResponse'

    post:
      tags: [User Stories]
      summary: Create user story
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserStoryRequest'
      responses:
        '201':
          description: User story created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'

  /api/v1/user-stories/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [User Stories]
      summary: Get user story by ID
      responses:
        '200':
          description: User story details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'

    put:
      tags: [User Stories]
      summary: Update user story
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserStoryRequest'
      responses:
        '200':
          description: User story updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'

    delete:
      tags: [User Stories]
      summary: Delete user story
      responses:
        '204':
          description: User story deleted

  /api/v1/user-stories/{id}/acceptance-criteria:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [User Stories]
      summary: Get user story acceptance criteria
      responses:
        '200':
          description: List of acceptance criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptanceCriteriaListResponse'
    post:
      tags: [User Stories]
      summary: Create acceptance criteria in user story
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAcceptanceCriteriaRequest'
      responses:
        '201':
          description: Acceptance criteria created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptanceCriteria'

  /api/v1/user-stories/{id}/requirements:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [User Stories]
      summary: Get user story requirements
      responses:
        '200':
          description: User story with requirements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'
    post:
      tags: [User Stories]
      summary: Create requirement in user story
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequirementRequest'
      responses:
        '201':
          description: Requirement created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'

  /api/v1/user-stories/{id}/status:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    patch:
      tags: [User Stories]
      summary: Change user story status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
      responses:
        '200':
          description: Status changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'

  /api/v1/user-stories/{id}/assign:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    patch:
      tags: [User Stories]
      summary: Assign user story to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentRequest'
      responses:
        '200':
          description: User story assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'

  /api/v1/user-stories/{id}/validate-deletion:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [User Stories]
      summary: Validate user story deletion
      description: Check if user story can be deleted and get dependency information
      responses:
        '200':
          description: Deletion validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyInfo'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/user-stories/{id}/delete:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    delete:
      tags: [User Stories]
      summary: Comprehensive user story deletion
      description: Delete user story with all dependencies and cascade operations
      responses:
        '200':
          description: Deletion completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletionResult'
        '409':
          description: Cannot delete due to dependencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user-stories/{id}/comments:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [User Stories, Comments]
      summary: Get user story comments
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of user story comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'
    post:
      tags: [User Stories, Comments]
      summary: Create user story comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /api/v1/user-stories/{id}/comments/inline:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    post:
      tags: [User Stories, Comments]
      summary: Create user story inline comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInlineCommentRequest'
      responses:
        '201':
          description: Inline comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /api/v1/user-stories/{id}/comments/inline/visible:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [User Stories, Comments]
      summary: Get visible user story inline comments
      responses:
        '200':
          description: List of visible inline comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'

  /api/v1/user-stories/{id}/comments/inline/validate:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    post:
      tags: [User Stories, Comments]
      summary: Validate user story inline comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineCommentValidationRequest'
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'

  # Acceptance Criteria endpoints
  /api/v1/acceptance-criteria:
    get:
      tags: [Acceptance Criteria]
      summary: List acceptance criteria
      parameters:
        - name: user_story_id
          in: query
          schema:
            type: string
            format: uuid
        - name: author_id
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/OrderByParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of acceptance criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptanceCriteriaListResponse'

  /api/v1/acceptance-criteria/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Acceptance Criteria]
      summary: Get acceptance criteria by ID
      responses:
        '200':
          description: Acceptance criteria details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptanceCriteria'

    put:
      tags: [Acceptance Criteria]
      summary: Update acceptance criteria
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAcceptanceCriteriaRequest'
      responses:
        '200':
          description: Acceptance criteria updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptanceCriteria'

    delete:
      tags: [Acceptance Criteria]
      summary: Delete acceptance criteria
      responses:
        '204':
          description: Acceptance criteria deleted

  /api/v1/acceptance-criteria/{id}/validate-deletion:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Acceptance Criteria]
      summary: Validate acceptance criteria deletion
      description: Check if acceptance criteria can be deleted and get dependency information
      responses:
        '200':
          description: Deletion validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyInfo'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/acceptance-criteria/{id}/delete:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    delete:
      tags: [Acceptance Criteria]
      summary: Comprehensive acceptance criteria deletion
      description: Delete acceptance criteria with all dependencies and cascade operations
      responses:
        '200':
          description: Deletion completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletionResult'
        '409':
          description: Cannot delete due to dependencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/acceptance-criteria/{id}/comments:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Acceptance Criteria, Comments]
      summary: Get acceptance criteria comments
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of acceptance criteria comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'
    post:
      tags: [Acceptance Criteria, Comments]
      summary: Create acceptance criteria comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /api/v1/acceptance-criteria/{id}/comments/inline:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    post:
      tags: [Acceptance Criteria, Comments]
      summary: Create acceptance criteria inline comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInlineCommentRequest'
      responses:
        '201':
          description: Inline comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /api/v1/acceptance-criteria/{id}/comments/inline/visible:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Acceptance Criteria, Comments]
      summary: Get visible acceptance criteria inline comments
      responses:
        '200':
          description: List of visible inline comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'

  /api/v1/acceptance-criteria/{id}/comments/inline/validate:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    post:
      tags: [Acceptance Criteria, Comments]
      summary: Validate acceptance criteria inline comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineCommentValidationRequest'
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'

  # Requirements endpoints
  /api/v1/requirements:
    get:
      tags: [Requirements]
      summary: List requirements
      parameters:
        - name: user_story_id
          in: query
          schema:
            type: string
            format: uuid
        - name: acceptance_criteria_id
          in: query
          schema:
            type: string
            format: uuid
        - name: type_id
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/CreatorIdParam'
        - $ref: '#/components/parameters/AssigneeIdParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/RequirementStatus'
        - $ref: '#/components/parameters/PriorityParam'
        - $ref: '#/components/parameters/OrderByParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/IncludeParam'
      responses:
        '200':
          description: List of requirements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequirementListResponse'

    post:
      tags: [Requirements]
      summary: Create requirement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequirementRequest'
      responses:
        '201':
          description: Requirement created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'

  /api/v1/requirements/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Requirements]
      summary: Get requirement by ID
      responses:
        '200':
          description: Requirement details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'

    put:
      tags: [Requirements]
      summary: Update requirement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequirementRequest'
      responses:
        '200':
          description: Requirement updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'

    delete:
      tags: [Requirements]
      summary: Delete requirement
      responses:
        '204':
          description: Requirement deleted

  /api/v1/requirements/search:
    get:
      tags: [Requirements]
      summary: Search requirements
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  /api/v1/requirements/{id}/relationships:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Requirements]
      summary: Get requirement with relationships
      responses:
        '200':
          description: Requirement with relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'

  /api/v1/requirements/{id}/status:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    patch:
      tags: [Requirements]
      summary: Change requirement status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
      responses:
        '200':
          description: Status changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'

  /api/v1/requirements/{id}/assign:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    patch:
      tags: [Requirements]
      summary: Assign requirement to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentRequest'
      responses:
        '200':
          description: Requirement assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'

  /api/v1/requirements/relationships:
    post:
      tags: [Requirements]
      summary: Create requirement relationship
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRelationshipRequest'
      responses:
        '201':
          description: Relationship created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequirementRelationship'

  /api/v1/requirements/{id}/validate-deletion:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Requirements]
      summary: Validate requirement deletion
      description: Check if requirement can be deleted and get dependency information
      responses:
        '200':
          description: Deletion validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyInfo'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/requirements/{id}/delete:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    delete:
      tags: [Requirements]
      summary: Comprehensive requirement deletion
      description: Delete requirement with all dependencies and cascade operations
      responses:
        '200':
          description: Deletion completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletionResult'
        '409':
          description: Cannot delete due to dependencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/requirements/{id}/comments:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Requirements, Comments]
      summary: Get requirement comments
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of requirement comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'
    post:
      tags: [Requirements, Comments]
      summary: Create requirement comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /api/v1/requirements/{id}/comments/inline:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    post:
      tags: [Requirements, Comments]
      summary: Create requirement inline comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInlineCommentRequest'
      responses:
        '201':
          description: Inline comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /api/v1/requirements/{id}/comments/inline/visible:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Requirements, Comments]
      summary: Get visible requirement inline comments
      responses:
        '200':
          description: List of visible inline comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'

  /api/v1/requirements/{id}/comments/inline/validate:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    post:
      tags: [Requirements, Comments]
      summary: Validate requirement inline comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineCommentValidationRequest'
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'

  # Search endpoints
  /api/v1/search:
    get:
      tags: [Search]
      summary: Global search
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: entity_types
          in: query
          schema:
            type: string
          description: Comma-separated entity types to search
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/search/suggestions:
    get:
      tags: [Search]
      summary: Get search suggestions
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            minLength: 2
          description: Partial search query
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Maximum suggestions per category
      responses:
        '200':
          description: Search suggestions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSuggestionsResponse'

  # Hierarchy endpoints
  /api/v1/hierarchy:
    get:
      tags: [Navigation]
      summary: Get full hierarchy
      responses:
        '200':
          description: Complete hierarchy tree
          content:
            application/json:
              schema:
                type: object
                properties:
                  hierarchy:
                    type: array
                    items:
                      $ref: '#/components/schemas/HierarchyNode'

  /api/v1/hierarchy/path/{entity_type}/{id}:
    get:
      tags: [Navigation]
      summary: Get entity breadcrumb path
      parameters:
        - name: entity_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EntityType'
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Entity path
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: array
                    items:
                      $ref: '#/components/schemas/EntityPath'

  /api/v1/hierarchy/epics/{id}:
    get:
      tags: [Navigation]
      summary: Get epic hierarchy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Epic ID (UUID or reference ID)
      responses:
        '200':
          description: Epic hierarchy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyNode'

  /api/v1/hierarchy/user-stories/{id}:
    get:
      tags: [Navigation]
      summary: Get user story hierarchy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User story ID (UUID or reference ID)
      responses:
        '200':
          description: User story hierarchy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyNode'

  # Requirement Relationships
  /api/v1/requirement-relationships/{id}:
    delete:
      tags: [Requirements]
      summary: Delete requirement relationship
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Relationship deleted
        '404':
          $ref: '#/components/responses/NotFound'

  # General deletion confirmation
  /api/v1/deletion/confirm:
    get:
      tags: [Deletion]
      summary: Get deletion confirmation
      description: Get deletion validation information for any entity type using query parameters
      parameters:
        - name: entity_type
          in: query
          required: true
          schema:
            type: string
            enum: [epic, user_story, acceptance_criteria, requirement]
          description: Type of entity to validate deletion for
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Entity ID to validate deletion for
      responses:
        '200':
          description: Deletion validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyInfo'
        '400':
          description: Bad request - missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # General Comment endpoints
  /api/v1/comments/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: UUID of the comment
    get:
      tags: [Comments]
      summary: Get comment by ID
      description: Retrieve a specific comment with its details and optional populated fields
      responses:
        '200':
          description: Comment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Comments]
      summary: Update comment
      description: Update the content of an existing comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Comments]
      summary: Delete comment
      description: Delete a comment and all its replies (cascade deletion)
      responses:
        '204':
          description: Comment deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/comments/{id}/resolve:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: UUID of the comment to resolve
    post:
      tags: [Comments]
      summary: Resolve comment
      description: Mark a comment as resolved, indicating that the issue or question has been addressed
      responses:
        '200':
          description: Comment resolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/comments/{id}/unresolve:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: UUID of the comment to unresolve
    post:
      tags: [Comments]
      summary: Unresolve comment
      description: Mark a previously resolved comment as unresolved, reopening the discussion
      responses:
        '200':
          description: Comment unresolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/comments/status/{status}:
    get:
      tags: [Comments]
      summary: Get comments by status
      description: Retrieve comments filtered by their resolution status across all entities
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum: [resolved, unresolved]
          description: Filter comments by resolution status
          example: "unresolved"
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of comments filtered by status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'
        '400':
          $ref: '#/components/responses/ValidationError'

  /api/v1/comments/{id}/replies:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: UUID of the parent comment
    get:
      tags: [Comments]
      summary: Get comment replies
      description: Retrieve all replies to a specific comment with pagination support
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of comment replies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags: [Comments]
      summary: Create comment reply
      description: Create a new reply to an existing comment, establishing a parent-child relationship
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Reply created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'

  # Configuration Management endpoints
  /api/v1/config/requirement-types:
    get:
      tags: [Configuration]
      summary: List requirement types
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '200':
          description: List of requirement types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequirementTypeListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [Configuration]
      summary: Create requirement type
      security:
        - BearerAuth: []
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequirementTypeRequest'
      responses:
        '201':
          description: Requirement type created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequirementType'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/v1/config/requirement-types/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Configuration]
      summary: Get requirement type by ID
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '200':
          description: Requirement type details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequirementType'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Configuration]
      summary: Update requirement type
      security:
        - BearerAuth: []
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequirementTypeRequest'
      responses:
        '200':
          description: Requirement type updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequirementType'
    delete:
      tags: [Configuration]
      summary: Delete requirement type
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '204':
          description: Requirement type deleted

  /api/v1/config/relationship-types:
    get:
      tags: [Configuration]
      summary: List relationship types
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '200':
          description: List of relationship types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipTypeListResponse'
    post:
      tags: [Configuration]
      summary: Create relationship type
      security:
        - BearerAuth: []
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRelationshipTypeRequest'
      responses:
        '201':
          description: Relationship type created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipType'

  /api/v1/config/relationship-types/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Configuration]
      summary: Get relationship type by ID
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '200':
          description: Relationship type details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipType'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Configuration]
      summary: Update relationship type
      security:
        - BearerAuth: []
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRelationshipTypeRequest'
      responses:
        '200':
          description: Relationship type updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipType'
    delete:
      tags: [Configuration]
      summary: Delete relationship type
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '204':
          description: Relationship type deleted

  /api/v1/config/status-models:
    get:
      tags: [Configuration]
      summary: List status models
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '200':
          description: List of status models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModelListResponse'
    post:
      tags: [Configuration]
      summary: Create status model
      security:
        - BearerAuth: []
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStatusModelRequest'
      responses:
        '201':
          description: Status model created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'

  /api/v1/config/status-models/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Configuration]
      summary: Get status model by ID
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '200':
          description: Status model details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Configuration]
      summary: Update status model
      security:
        - BearerAuth: []
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusModelRequest'
      responses:
        '200':
          description: Status model updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
    delete:
      tags: [Configuration]
      summary: Delete status model
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '204':
          description: Status model deleted

  /api/v1/config/status-models/default/{entity_type}:
    get:
      tags: [Configuration]
      summary: Get default status model for entity type
      security:
        - BearerAuth: []
      x-required-role: Administrator
      parameters:
        - name: entity_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EntityType'
      responses:
        '200':
          description: Default status model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'

  /api/v1/config/status-models/{id}/statuses:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Configuration]
      summary: List statuses by model
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '200':
          description: List of statuses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusListResponse'

  /api/v1/config/status-models/{id}/transitions:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Configuration]
      summary: List status transitions by model
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '200':
          description: List of status transitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusTransitionListResponse'

  /api/v1/config/statuses:
    post:
      tags: [Configuration]
      summary: Create status
      security:
        - BearerAuth: []
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStatusRequest'
      responses:
        '201':
          description: Status created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

  /api/v1/config/statuses/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Configuration]
      summary: Get status by ID
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '200':
          description: Status details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Configuration]
      summary: Update status
      security:
        - BearerAuth: []
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusRequest'
      responses:
        '200':
          description: Status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
    delete:
      tags: [Configuration]
      summary: Delete status
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '204':
          description: Status deleted

  /api/v1/config/status-transitions:
    post:
      tags: [Configuration]
      summary: Create status transition
      security:
        - BearerAuth: []
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStatusTransitionRequest'
      responses:
        '201':
          description: Status transition created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusTransition'

  /api/v1/config/status-transitions/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Configuration]
      summary: Get status transition by ID
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '200':
          description: Status transition details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusTransition'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Configuration]
      summary: Update status transition
      security:
        - BearerAuth: []
      x-required-role: Administrator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusTransitionRequest'
      responses:
        '200':
          description: Status transition updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusTransition'
    delete:
      tags: [Configuration]
      summary: Delete status transition
      security:
        - BearerAuth: []
      x-required-role: Administrator
      responses:
        '204':
          description: Status transition deleted

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication. Include as Authorization Bearer token header.

  parameters:
    EntityIdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Entity ID (UUID or reference ID)

    CreatorIdParam:
      name: creator_id
      in: query
      schema:
        type: string
        format: uuid
      description: Filter by creator UUID

    AssigneeIdParam:
      name: assignee_id
      in: query
      schema:
        type: string
        format: uuid
      description: Filter by assignee UUID

    PriorityParam:
      name: priority
      in: query
      schema:
        $ref: '#/components/schemas/Priority'
      description: Filter by priority level

    OrderByParam:
      name: order_by
      in: query
      schema:
        type: string
      description: Sort order (e.g., 'created_at DESC', 'reference_id ASC')

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 50
      description: Maximum number of results

    OffsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Number of results to skip

    IncludeParam:
      name: include
      in: query
      schema:
        type: string
      description: Comma-separated list of related entities to include

  responses:
    NotFound:
      description: Entity not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    # Enums
    UserRole:
      type: string
      enum: [Administrator, User, Commenter]

    EntityType:
      type: string
      enum: [epic, user_story, acceptance_criteria, requirement]

    Priority:
      type: integer
      minimum: 1
      maximum: 4
      description: "1=Critical, 2=High, 3=Medium, 4=Low"

    EpicStatus:
      type: string
      enum: [Backlog, Draft, "In Progress", Done, Cancelled]

    UserStoryStatus:
      type: string
      enum: [Backlog, Draft, "In Progress", Done, Cancelled]

    RequirementStatus:
      type: string
      enum: [Draft, Active, Obsolete]

    # Core entities
    User:
      type: object
      description: User account information with role-based access control
      required: [id, username, email, role, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required: [username, email, password, role]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        role:
          $ref: '#/components/schemas/UserRole'

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'

    UserListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'

    Epic:
      type: object
      description: High-level feature or initiative containing multiple user stories
      required: [id, reference_id, title, status, priority, creator_id, created_at, last_modified]
      properties:
        id:
          type: string
          format: uuid
        reference_id:
          type: string
          pattern: '^EP-\d+$'
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 5000
        status:
          $ref: '#/components/schemas/EpicStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        creator_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        last_modified:
          type: string
          format: date-time
        # Optional populated fields
        creator:
          $ref: '#/components/schemas/User'
        assignee:
          $ref: '#/components/schemas/User'
        user_stories:
          type: array
          items:
            $ref: '#/components/schemas/UserStory'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    UserStory:
      type: object
      required: [id, reference_id, title, status, priority, epic_id, creator_id, created_at, last_modified]
      properties:
        id:
          type: string
          format: uuid
        reference_id:
          type: string
          pattern: '^US-\d+$'
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 2000
        status:
          $ref: '#/components/schemas/UserStoryStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        epic_id:
          type: string
          format: uuid
        creator_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        last_modified:
          type: string
          format: date-time
        # Optional populated fields
        epic:
          $ref: '#/components/schemas/Epic'
        creator:
          $ref: '#/components/schemas/User'
        assignee:
          $ref: '#/components/schemas/User'
        acceptance_criteria:
          type: array
          items:
            $ref: '#/components/schemas/AcceptanceCriteria'
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/Requirement'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    AcceptanceCriteria:
      type: object
      required: [id, reference_id, description, user_story_id, author_id, created_at, last_modified]
      properties:
        id:
          type: string
          format: uuid
        reference_id:
          type: string
          pattern: '^AC-\d+$'
        description:
          type: string
        user_story_id:
          type: string
          format: uuid
        author_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        last_modified:
          type: string
          format: date-time
        # Optional populated fields
        user_story:
          $ref: '#/components/schemas/UserStory'
        author:
          $ref: '#/components/schemas/User'
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/Requirement'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Requirement:
      type: object
      required: [id, reference_id, title, status, priority, user_story_id, type_id, creator_id, created_at, last_modified]
      properties:
        id:
          type: string
          format: uuid
        reference_id:
          type: string
          pattern: '^REQ-\d+$'
        title:
          type: string
          maxLength: 500
        description:
          type: string
        status:
          $ref: '#/components/schemas/RequirementStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        user_story_id:
          type: string
          format: uuid
        acceptance_criteria_id:
          type: string
          format: uuid
        type_id:
          type: string
          format: uuid
        creator_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        last_modified:
          type: string
          format: date-time
        # Optional populated fields
        user_story:
          $ref: '#/components/schemas/UserStory'
        acceptance_criteria:
          $ref: '#/components/schemas/AcceptanceCriteria'
        type:
          $ref: '#/components/schemas/RequirementType'
        creator:
          $ref: '#/components/schemas/User'
        assignee:
          $ref: '#/components/schemas/User'
        source_relationships:
          type: array
          items:
            $ref: '#/components/schemas/RequirementRelationship'
        target_relationships:
          type: array
          items:
            $ref: '#/components/schemas/RequirementRelationship'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Comment:
      type: object
      required: [id, content, entity_type, entity_id, author_id, is_resolved, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the comment
        content:
          type: string
          description: The text content of the comment
          example: "This requirement needs clarification on the user authentication flow."
        entity_type:
          $ref: '#/components/schemas/EntityType'
          description: Type of entity this comment is attached to
        entity_id:
          type: string
          format: uuid
          description: UUID of the entity this comment is attached to
        author_id:
          type: string
          format: uuid
          description: UUID of the user who created the comment
        parent_comment_id:
          type: string
          format: uuid
          description: UUID of the parent comment if this is a reply
        is_resolved:
          type: boolean
          description: Whether the comment has been resolved
          example: false
        linked_text:
          type: string
          description: Text that this inline comment is linked to (for inline comments only)
          example: "user authentication"
        text_position_start:
          type: integer
          minimum: 0
          description: Start position of the linked text (for inline comments only)
          example: 45
        text_position_end:
          type: integer
          minimum: 0
          description: End position of the linked text (for inline comments only)
          example: 63
        created_at:
          type: string
          format: date-time
          description: Timestamp when the comment was created
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the comment was last updated
          example: "2024-01-15T14:20:00Z"
        # Optional populated fields
        author:
          $ref: '#/components/schemas/User'
          description: Author user object (populated when include=author)
        parent_comment:
          $ref: '#/components/schemas/Comment'
          description: Parent comment object (populated for replies)
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
          description: Array of reply comments (populated when include=replies)

    RequirementType:
      type: object
      required: [id, name, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RelationshipType:
      type: object
      required: [id, name, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RequirementRelationship:
      type: object
      required: [id, source_requirement_id, target_requirement_id, relationship_type_id, created_by, created_at]
      properties:
        id:
          type: string
          format: uuid
        source_requirement_id:
          type: string
          format: uuid
        target_requirement_id:
          type: string
          format: uuid
        relationship_type_id:
          type: string
          format: uuid
        created_by:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        # Optional populated fields
        source_requirement:
          $ref: '#/components/schemas/Requirement'
        target_requirement:
          $ref: '#/components/schemas/Requirement'
        relationship_type:
          $ref: '#/components/schemas/RelationshipType'
        creator:
          $ref: '#/components/schemas/User'

    # Request schemas
    LoginRequest:
      type: object
      description: User login credentials
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
      example:
        username: "john_doe"
        password: "securePassword123"

    LoginResponse:
      type: object
      required: [token, expires_at, user]
      properties:
        token:
          type: string
        expires_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    ChangePasswordRequest:
      type: object
      required: [current_password, new_password]
      properties:
        current_password:
          type: string
        new_password:
          type: string
          minLength: 8

    CreateEpicRequest:
      type: object
      required: [title, priority, creator_id]
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 5000
        priority:
          $ref: '#/components/schemas/Priority'
        creator_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid

    UpdateEpicRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 5000
        priority:
          $ref: '#/components/schemas/Priority'
        assignee_id:
          type: string
          format: uuid

    CreateUserStoryRequest:
      type: object
      required: [title, priority, epic_id]
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 2000
        priority:
          $ref: '#/components/schemas/Priority'
        epic_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid

    UpdateUserStoryRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 2000
        priority:
          $ref: '#/components/schemas/Priority'
        assignee_id:
          type: string
          format: uuid

    CreateAcceptanceCriteriaRequest:
      type: object
      required: [description, user_story_id]
      properties:
        description:
          type: string
        user_story_id:
          type: string
          format: uuid

    UpdateAcceptanceCriteriaRequest:
      type: object
      properties:
        description:
          type: string

    CreateRequirementRequest:
      type: object
      required: [title, priority, user_story_id, type_id]
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
        priority:
          $ref: '#/components/schemas/Priority'
        user_story_id:
          type: string
          format: uuid
        acceptance_criteria_id:
          type: string
          format: uuid
        type_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid

    UpdateRequirementRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
        priority:
          $ref: '#/components/schemas/Priority'
        assignee_id:
          type: string
          format: uuid

    CreateCommentRequest:
      type: object
      required: [content]
      properties:
        content:
          type: string
          description: The text content of the comment
          example: "This requirement needs clarification on the user authentication flow."
          maxLength: 5000
        parent_comment_id:
          type: string
          format: uuid
          description: UUID of the parent comment if creating a reply (optional)

    CreateInlineCommentRequest:
      type: object
      required: [content, linked_text, text_position_start, text_position_end]
      properties:
        content:
          type: string
          description: The text content of the inline comment
          example: "This term needs better definition"
          maxLength: 5000
        linked_text:
          type: string
          description: The exact text that this comment is linked to
          example: "user authentication"
        text_position_start:
          type: integer
          minimum: 0
          description: Start character position of the linked text in the entity content
          example: 45
        text_position_end:
          type: integer
          minimum: 0
          description: End character position of the linked text in the entity content
          example: 63

    StatusChangeRequest:
      type: object
      required: [status]
      properties:
        status:
          type: string

    AssignmentRequest:
      type: object
      properties:
        assignee_id:
          type: string
          format: uuid
          nullable: true

    # Response schemas
    ErrorResponse:
      type: object
      description: Standard error response with code and message
      required: [error]
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
            message:
              type: string

    ListResponse:
      type: object
      required: [data, total_count, limit, offset]
      properties:
        data:
          type: array
          items: {}
        total_count:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 1
          maximum: 100
        offset:
          type: integer
          minimum: 0

    EpicListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Epic'

    UserStoryListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserStory'

    AcceptanceCriteriaListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/AcceptanceCriteria'

    RequirementListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'

    SearchResult:
      type: object
      required: [entity_type, entity_id, reference_id, title, rank]
      properties:
        entity_type:
          $ref: '#/components/schemas/EntityType'
        entity_id:
          type: string
          format: uuid
        reference_id:
          type: string
        title:
          type: string
        description:
          type: string
        highlight:
          type: string
        rank:
          type: number

    SearchResponse:
      type: object
      required: [results, total_count, query, entity_types, limit, offset]
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        total_count:
          type: integer
          minimum: 0
        query:
          type: string
        entity_types:
          type: array
          items:
            type: string
        limit:
          type: integer
          minimum: 1
          maximum: 100
        offset:
          type: integer
          minimum: 0

    SearchSuggestionsResponse:
      type: object
      required: [titles, reference_ids, statuses]
      properties:
        titles:
          type: array
          items:
            type: string
        reference_ids:
          type: array
          items:
            type: string
        statuses:
          type: array
          items:
            type: string

    HierarchyNode:
      type: object
      required: [entity_type, entity_id, reference_id, title, status]
      properties:
        entity_type:
          $ref: '#/components/schemas/EntityType'
        entity_id:
          type: string
          format: uuid
        reference_id:
          type: string
        title:
          type: string
        status:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/HierarchyNode'

    EntityPath:
      type: object
      required: [entity_type, entity_id, reference_id, title]
      properties:
        entity_type:
          $ref: '#/components/schemas/EntityType'
        entity_id:
          type: string
          format: uuid
        reference_id:
          type: string
        title:
          type: string

    # Deletion System Schemas
    DependencyInfo:
      type: object
      required: [can_delete, dependencies, warnings]
      properties:
        can_delete:
          type: boolean
          description: Whether the entity can be safely deleted
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/DependencyItem'
          description: List of entities that depend on this entity
        warnings:
          type: array
          items:
            type: string
          description: Warning messages about the deletion

    DependencyItem:
      type: object
      required: [entity_type, entity_id, reference_id, title, dependency_type]
      properties:
        entity_type:
          type: string
          description: Type of the dependent entity
        entity_id:
          type: string
          format: uuid
          description: UUID of the dependent entity
        reference_id:
          type: string
          description: Human-readable reference ID of the dependent entity
        title:
          type: string
          description: Title of the dependent entity
        dependency_type:
          type: string
          description: Type of dependency (e.g., 'child', 'reference', 'relationship')

    DeletionResult:
      type: object
      required: [success, deleted_entities, message]
      properties:
        success:
          type: boolean
          description: Whether the deletion operation was successful
        deleted_entities:
          type: array
          items:
            $ref: '#/components/schemas/DeletedEntity'
          description: List of entities that were deleted
        message:
          type: string
          description: Human-readable message about the deletion result

    DeletedEntity:
      type: object
      required: [entity_type, entity_id, reference_id]
      properties:
        entity_type:
          type: string
          description: Type of the deleted entity
        entity_id:
          type: string
          format: uuid
          description: UUID of the deleted entity
        reference_id:
          type: string
          description: Human-readable reference ID of the deleted entity

    # Comment System Schemas
    CommentListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Comment'

    UpdateCommentRequest:
      type: object
      required: [content]
      properties:
        content:
          type: string
          description: Updated comment content
          example: "This requirement needs clarification on the user authentication flow and error handling."
          maxLength: 5000

    InlineCommentValidationRequest:
      type: object
      required: [comments]
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/InlineCommentPosition'
          description: List of inline comment positions to validate against current entity content
          example:
            - comment_id: "123e4567-e89b-12d3-a456-426614174000"
              text_position_start: 45
              text_position_end: 63
            - comment_id: "987fcdeb-51a2-43d7-b123-456789abcdef"
              text_position_start: 120
              text_position_end: 135

    InlineCommentPosition:
      type: object
      required: [comment_id, text_position_start, text_position_end]
      properties:
        comment_id:
          type: string
          format: uuid
          description: UUID of the inline comment to validate
          example: "123e4567-e89b-12d3-a456-426614174000"
        text_position_start:
          type: integer
          minimum: 0
          description: Start character position of the comment in the entity content
          example: 45
        text_position_end:
          type: integer
          minimum: 0
          description: End character position of the comment in the entity content
          example: 63

    # Relationship Management Schemas
    CreateRelationshipRequest:
      type: object
      required: [source_requirement_id, target_requirement_id, relationship_type_id]
      properties:
        source_requirement_id:
          type: string
          format: uuid
          description: UUID of the source requirement
        target_requirement_id:
          type: string
          format: uuid
          description: UUID of the target requirement
        relationship_type_id:
          type: string
          format: uuid
          description: UUID of the relationship type

    # Configuration Management Schemas
    CreateRequirementTypeRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500

    UpdateRequirementTypeRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500

    CreateRelationshipTypeRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500

    UpdateRelationshipTypeRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500

    StatusModel:
      type: object
      required: [id, name, entity_type, is_default, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        entity_type:
          $ref: '#/components/schemas/EntityType'
        is_default:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        # Optional populated fields
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/Status'
        transitions:
          type: array
          items:
            $ref: '#/components/schemas/StatusTransition'

    Status:
      type: object
      required: [id, name, order, is_initial, is_final, status_model_id, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        color:
          type: string
        order:
          type: integer
        is_initial:
          type: boolean
        is_final:
          type: boolean
        status_model_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        # Optional populated fields
        status_model:
          $ref: '#/components/schemas/StatusModel'
        from_transitions:
          type: array
          items:
            $ref: '#/components/schemas/StatusTransition'
        to_transitions:
          type: array
          items:
            $ref: '#/components/schemas/StatusTransition'

    StatusTransition:
      type: object
      required: [id, from_status_id, to_status_id, status_model_id, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        from_status_id:
          type: string
          format: uuid
        to_status_id:
          type: string
          format: uuid
        status_model_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        # Optional populated fields
        from_status:
          $ref: '#/components/schemas/Status'
        to_status:
          $ref: '#/components/schemas/Status'
        status_model:
          $ref: '#/components/schemas/StatusModel'

    CreateStatusModelRequest:
      type: object
      required: [name, entity_type]
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        entity_type:
          $ref: '#/components/schemas/EntityType'
        is_default:
          type: boolean
          default: false

    UpdateStatusModelRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        is_default:
          type: boolean

    CreateStatusRequest:
      type: object
      required: [name, order, status_model_id]
      properties:
        name:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 200
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
        order:
          type: integer
          minimum: 0
        is_initial:
          type: boolean
          default: false
        is_final:
          type: boolean
          default: false
        status_model_id:
          type: string
          format: uuid

    UpdateStatusRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 200
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
        order:
          type: integer
          minimum: 0
        is_initial:
          type: boolean
        is_final:
          type: boolean

    CreateStatusTransitionRequest:
      type: object
      required: [from_status_id, to_status_id, status_model_id]
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 200
        from_status_id:
          type: string
          format: uuid
        to_status_id:
          type: string
          format: uuid
        status_model_id:
          type: string
          format: uuid

    UpdateStatusTransitionRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 200

    # Validation Response Schema
    ValidationResponse:
      type: object
      required: [valid, errors]
      properties:
        valid:
          type: boolean
          description: Whether the validation passed
        errors:
          type: array
          items:
            type: string
          description: List of validation error messages

    # Health Check Response Schema
    HealthCheckResponse:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [ok, error]
          description: Health check status
        reason:
          type: string
          description: Reason for the status (optional)

    # Configuration List Response Schemas
    RequirementTypeListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/RequirementType'

    RelationshipTypeListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/RelationshipType'

    StatusModelListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/StatusModel'

    StatusListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Status'

    StatusTransitionListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/StatusTransition'

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Epics
    description: Epic management operations
  - name: User Stories
    description: User story management operations
  - name: Acceptance Criteria
    description: Acceptance criteria management operations
  - name: Requirements
    description: Requirement management operations
  - name: Search
    description: Search and discovery operations
  - name: Navigation
    description: Hierarchy and navigation operations
  - name: Comments
    description: Comment system operations
  - name: Deletion
    description: Entity deletion and dependency management
  - name: Configuration
    description: System configuration management