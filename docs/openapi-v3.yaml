openapi: 3.0.3
info:
  title: Product Requirements Management API
  description: |
    Comprehensive API for managing product requirements through hierarchical structure of Epics → User Stories → Requirements. 
    Features include full-text search, comment system, relationship mapping, and configurable workflows.
  version: 1.0.0
  contact:
    name: API Support
    url: http://www.swagger.io/support
    email: support@swagger.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.requirements.example.com
    description: Production server

security:
  - BearerAuth: []

paths:
  # Authentication endpoints
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and receive JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags: [Authentication]
      summary: Get current user profile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/change-password:
    post:
      tags: [Authentication]
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Epic endpoints
  /api/v1/epics:
    get:
      tags: [Epics]
      summary: List epics
      parameters:
        - $ref: '#/components/parameters/CreatorIdParam'
        - $ref: '#/components/parameters/AssigneeIdParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/EpicStatus'
        - $ref: '#/components/parameters/PriorityParam'
        - $ref: '#/components/parameters/OrderByParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/IncludeParam'
      responses:
        '200':
          description: List of epics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpicListResponse'

    post:
      tags: [Epics]
      summary: Create epic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEpicRequest'
      responses:
        '201':
          description: Epic created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'

  /api/v1/epics/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Epics]
      summary: Get epic by ID
      responses:
        '200':
          description: Epic details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Epics]
      summary: Update epic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEpicRequest'
      responses:
        '200':
          description: Epic updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'

    delete:
      tags: [Epics]
      summary: Delete epic
      responses:
        '204':
          description: Epic deleted
        '409':
          description: Cannot delete due to dependencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/epics/{id}/user-stories:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Epics]
      summary: Get epic with user stories
      responses:
        '200':
          description: Epic with user stories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'

    post:
      tags: [Epics]
      summary: Create user story in epic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserStoryRequest'
      responses:
        '201':
          description: User story created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'

  /api/v1/epics/{id}/status:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    patch:
      tags: [Epics]
      summary: Change epic status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
      responses:
        '200':
          description: Status changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'

  /api/v1/epics/{id}/assign:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    patch:
      tags: [Epics]
      summary: Assign epic to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentRequest'
      responses:
        '200':
          description: Epic assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'

  # User Story endpoints
  /api/v1/user-stories:
    get:
      tags: [User Stories]
      summary: List user stories
      parameters:
        - name: epic_id
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/CreatorIdParam'
        - $ref: '#/components/parameters/AssigneeIdParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStoryStatus'
        - $ref: '#/components/parameters/PriorityParam'
        - $ref: '#/components/parameters/OrderByParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/IncludeParam'
      responses:
        '200':
          description: List of user stories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStoryListResponse'

    post:
      tags: [User Stories]
      summary: Create user story
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserStoryRequest'
      responses:
        '201':
          description: User story created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'

  /api/v1/user-stories/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [User Stories]
      summary: Get user story by ID
      responses:
        '200':
          description: User story details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'

    put:
      tags: [User Stories]
      summary: Update user story
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserStoryRequest'
      responses:
        '200':
          description: User story updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'

    delete:
      tags: [User Stories]
      summary: Delete user story
      responses:
        '204':
          description: User story deleted

  # Acceptance Criteria endpoints
  /api/v1/acceptance-criteria:
    get:
      tags: [Acceptance Criteria]
      summary: List acceptance criteria
      parameters:
        - name: user_story_id
          in: query
          schema:
            type: string
            format: uuid
        - name: author_id
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/OrderByParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of acceptance criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptanceCriteriaListResponse'

  /api/v1/acceptance-criteria/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Acceptance Criteria]
      summary: Get acceptance criteria by ID
      responses:
        '200':
          description: Acceptance criteria details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptanceCriteria'

    put:
      tags: [Acceptance Criteria]
      summary: Update acceptance criteria
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAcceptanceCriteriaRequest'
      responses:
        '200':
          description: Acceptance criteria updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptanceCriteria'

    delete:
      tags: [Acceptance Criteria]
      summary: Delete acceptance criteria
      responses:
        '204':
          description: Acceptance criteria deleted

  # Requirements endpoints
  /api/v1/requirements:
    get:
      tags: [Requirements]
      summary: List requirements
      parameters:
        - name: user_story_id
          in: query
          schema:
            type: string
            format: uuid
        - name: acceptance_criteria_id
          in: query
          schema:
            type: string
            format: uuid
        - name: type_id
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/CreatorIdParam'
        - $ref: '#/components/parameters/AssigneeIdParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/RequirementStatus'
        - $ref: '#/components/parameters/PriorityParam'
        - $ref: '#/components/parameters/OrderByParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/IncludeParam'
      responses:
        '200':
          description: List of requirements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequirementListResponse'

    post:
      tags: [Requirements]
      summary: Create requirement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequirementRequest'
      responses:
        '201':
          description: Requirement created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'

  /api/v1/requirements/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityIdParam'
    get:
      tags: [Requirements]
      summary: Get requirement by ID
      responses:
        '200':
          description: Requirement details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'

    put:
      tags: [Requirements]
      summary: Update requirement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequirementRequest'
      responses:
        '200':
          description: Requirement updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'

    delete:
      tags: [Requirements]
      summary: Delete requirement
      responses:
        '204':
          description: Requirement deleted

  # Search endpoints
  /api/v1/search:
    get:
      tags: [Search]
      summary: Global search
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: entity_types
          in: query
          schema:
            type: string
          description: Comma-separated entity types to search
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  /api/v1/search/suggestions:
    get:
      tags: [Search]
      summary: Get search suggestions
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            minLength: 2
          description: Partial search query
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Maximum suggestions per category
      responses:
        '200':
          description: Search suggestions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSuggestionsResponse'

  # Hierarchy endpoints
  /api/v1/hierarchy:
    get:
      tags: [Navigation]
      summary: Get full hierarchy
      responses:
        '200':
          description: Complete hierarchy tree
          content:
            application/json:
              schema:
                type: object
                properties:
                  hierarchy:
                    type: array
                    items:
                      $ref: '#/components/schemas/HierarchyNode'

  /api/v1/hierarchy/path/{entity_type}/{id}:
    get:
      tags: [Navigation]
      summary: Get entity breadcrumb path
      parameters:
        - name: entity_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EntityType'
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Entity path
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: array
                    items:
                      $ref: '#/components/schemas/EntityPath'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    EntityIdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Entity ID (UUID or reference ID)

    CreatorIdParam:
      name: creator_id
      in: query
      schema:
        type: string
        format: uuid
      description: Filter by creator UUID

    AssigneeIdParam:
      name: assignee_id
      in: query
      schema:
        type: string
        format: uuid
      description: Filter by assignee UUID

    PriorityParam:
      name: priority
      in: query
      schema:
        $ref: '#/components/schemas/Priority'
      description: Filter by priority level

    OrderByParam:
      name: order_by
      in: query
      schema:
        type: string
      description: Sort order (e.g., 'created_at DESC', 'reference_id ASC')

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 50
      description: Maximum number of results

    OffsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Number of results to skip

    IncludeParam:
      name: include
      in: query
      schema:
        type: string
      description: Comma-separated list of related entities to include

  responses:
    NotFound:
      description: Entity not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    # Enums
    UserRole:
      type: string
      enum: [Administrator, User, Commenter]

    EntityType:
      type: string
      enum: [epic, user_story, acceptance_criteria, requirement]

    Priority:
      type: integer
      minimum: 1
      maximum: 4
      description: "1=Critical, 2=High, 3=Medium, 4=Low"

    EpicStatus:
      type: string
      enum: [Backlog, Draft, "In Progress", Done, Cancelled]

    UserStoryStatus:
      type: string
      enum: [Backlog, Draft, "In Progress", Done, Cancelled]

    RequirementStatus:
      type: string
      enum: [Draft, Active, Obsolete]

    # Core entities
    User:
      type: object
      required: [id, username, email, role, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Epic:
      type: object
      required: [id, reference_id, title, status, priority, creator_id, created_at, last_modified]
      properties:
        id:
          type: string
          format: uuid
        reference_id:
          type: string
          pattern: '^EP-\d+$'
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 5000
        status:
          $ref: '#/components/schemas/EpicStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        creator_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        last_modified:
          type: string
          format: date-time
        # Optional populated fields
        creator:
          $ref: '#/components/schemas/User'
        assignee:
          $ref: '#/components/schemas/User'
        user_stories:
          type: array
          items:
            $ref: '#/components/schemas/UserStory'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    UserStory:
      type: object
      required: [id, reference_id, title, status, priority, epic_id, creator_id, created_at, last_modified]
      properties:
        id:
          type: string
          format: uuid
        reference_id:
          type: string
          pattern: '^US-\d+$'
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 2000
        status:
          $ref: '#/components/schemas/UserStoryStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        epic_id:
          type: string
          format: uuid
        creator_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        last_modified:
          type: string
          format: date-time
        # Optional populated fields
        epic:
          $ref: '#/components/schemas/Epic'
        creator:
          $ref: '#/components/schemas/User'
        assignee:
          $ref: '#/components/schemas/User'
        acceptance_criteria:
          type: array
          items:
            $ref: '#/components/schemas/AcceptanceCriteria'
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/Requirement'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    AcceptanceCriteria:
      type: object
      required: [id, reference_id, description, user_story_id, author_id, created_at, last_modified]
      properties:
        id:
          type: string
          format: uuid
        reference_id:
          type: string
          pattern: '^AC-\d+$'
        description:
          type: string
        user_story_id:
          type: string
          format: uuid
        author_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        last_modified:
          type: string
          format: date-time
        # Optional populated fields
        user_story:
          $ref: '#/components/schemas/UserStory'
        author:
          $ref: '#/components/schemas/User'
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/Requirement'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Requirement:
      type: object
      required: [id, reference_id, title, status, priority, user_story_id, type_id, creator_id, created_at, last_modified]
      properties:
        id:
          type: string
          format: uuid
        reference_id:
          type: string
          pattern: '^REQ-\d+$'
        title:
          type: string
          maxLength: 500
        description:
          type: string
        status:
          $ref: '#/components/schemas/RequirementStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        user_story_id:
          type: string
          format: uuid
        acceptance_criteria_id:
          type: string
          format: uuid
        type_id:
          type: string
          format: uuid
        creator_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        last_modified:
          type: string
          format: date-time
        # Optional populated fields
        user_story:
          $ref: '#/components/schemas/UserStory'
        acceptance_criteria:
          $ref: '#/components/schemas/AcceptanceCriteria'
        type:
          $ref: '#/components/schemas/RequirementType'
        creator:
          $ref: '#/components/schemas/User'
        assignee:
          $ref: '#/components/schemas/User'
        source_relationships:
          type: array
          items:
            $ref: '#/components/schemas/RequirementRelationship'
        target_relationships:
          type: array
          items:
            $ref: '#/components/schemas/RequirementRelationship'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Comment:
      type: object
      required: [id, content, entity_type, entity_id, author_id, is_resolved, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        entity_type:
          $ref: '#/components/schemas/EntityType'
        entity_id:
          type: string
          format: uuid
        author_id:
          type: string
          format: uuid
        parent_comment_id:
          type: string
          format: uuid
        is_resolved:
          type: boolean
        linked_text:
          type: string
        text_position_start:
          type: integer
          minimum: 0
        text_position_end:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        # Optional populated fields
        author:
          $ref: '#/components/schemas/User'
        parent_comment:
          $ref: '#/components/schemas/Comment'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    RequirementType:
      type: object
      required: [id, name, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RelationshipType:
      type: object
      required: [id, name, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RequirementRelationship:
      type: object
      required: [id, source_requirement_id, target_requirement_id, relationship_type_id, created_by, created_at]
      properties:
        id:
          type: string
          format: uuid
        source_requirement_id:
          type: string
          format: uuid
        target_requirement_id:
          type: string
          format: uuid
        relationship_type_id:
          type: string
          format: uuid
        created_by:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        # Optional populated fields
        source_requirement:
          $ref: '#/components/schemas/Requirement'
        target_requirement:
          $ref: '#/components/schemas/Requirement'
        relationship_type:
          $ref: '#/components/schemas/RelationshipType'
        creator:
          $ref: '#/components/schemas/User'

    # Request schemas
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      required: [token, expires_at, user]
      properties:
        token:
          type: string
        expires_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    ChangePasswordRequest:
      type: object
      required: [current_password, new_password]
      properties:
        current_password:
          type: string
        new_password:
          type: string
          minLength: 8

    CreateEpicRequest:
      type: object
      required: [title, priority]
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 5000
        priority:
          $ref: '#/components/schemas/Priority'
        assignee_id:
          type: string
          format: uuid

    UpdateEpicRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 5000
        priority:
          $ref: '#/components/schemas/Priority'
        assignee_id:
          type: string
          format: uuid

    CreateUserStoryRequest:
      type: object
      required: [title, priority, epic_id]
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 2000
        priority:
          $ref: '#/components/schemas/Priority'
        epic_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid

    UpdateUserStoryRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 2000
        priority:
          $ref: '#/components/schemas/Priority'
        assignee_id:
          type: string
          format: uuid

    CreateAcceptanceCriteriaRequest:
      type: object
      required: [description, user_story_id]
      properties:
        description:
          type: string
        user_story_id:
          type: string
          format: uuid

    UpdateAcceptanceCriteriaRequest:
      type: object
      properties:
        description:
          type: string

    CreateRequirementRequest:
      type: object
      required: [title, priority, user_story_id, type_id]
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
        priority:
          $ref: '#/components/schemas/Priority'
        user_story_id:
          type: string
          format: uuid
        acceptance_criteria_id:
          type: string
          format: uuid
        type_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid

    UpdateRequirementRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 500
        description:
          type: string
        priority:
          $ref: '#/components/schemas/Priority'
        assignee_id:
          type: string
          format: uuid

    CreateCommentRequest:
      type: object
      required: [content]
      properties:
        content:
          type: string
        parent_comment_id:
          type: string
          format: uuid

    CreateInlineCommentRequest:
      type: object
      required: [content, linked_text, text_position_start, text_position_end]
      properties:
        content:
          type: string
        linked_text:
          type: string
        text_position_start:
          type: integer
          minimum: 0
        text_position_end:
          type: integer
          minimum: 0

    StatusChangeRequest:
      type: object
      required: [status]
      properties:
        status:
          type: string

    AssignmentRequest:
      type: object
      properties:
        assignee_id:
          type: string
          format: uuid
          nullable: true

    # Response schemas
    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
            message:
              type: string

    ListResponse:
      type: object
      required: [data, total_count, limit, offset]
      properties:
        data:
          type: array
          items: {}
        total_count:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 1
          maximum: 100
        offset:
          type: integer
          minimum: 0

    EpicListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Epic'

    UserStoryListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserStory'

    AcceptanceCriteriaListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/AcceptanceCriteria'

    RequirementListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'

    SearchResult:
      type: object
      required: [entity_type, entity_id, reference_id, title, rank]
      properties:
        entity_type:
          $ref: '#/components/schemas/EntityType'
        entity_id:
          type: string
          format: uuid
        reference_id:
          type: string
        title:
          type: string
        description:
          type: string
        highlight:
          type: string
        rank:
          type: number

    SearchResponse:
      type: object
      required: [results, total_count, query, entity_types, limit, offset]
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        total_count:
          type: integer
          minimum: 0
        query:
          type: string
        entity_types:
          type: array
          items:
            type: string
        limit:
          type: integer
          minimum: 1
          maximum: 100
        offset:
          type: integer
          minimum: 0

    SearchSuggestionsResponse:
      type: object
      required: [titles, reference_ids, statuses]
      properties:
        titles:
          type: array
          items:
            type: string
        reference_ids:
          type: array
          items:
            type: string
        statuses:
          type: array
          items:
            type: string

    HierarchyNode:
      type: object
      required: [entity_type, entity_id, reference_id, title, status]
      properties:
        entity_type:
          $ref: '#/components/schemas/EntityType'
        entity_id:
          type: string
          format: uuid
        reference_id:
          type: string
        title:
          type: string
        status:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/HierarchyNode'

    EntityPath:
      type: object
      required: [entity_type, entity_id, reference_id, title]
      properties:
        entity_type:
          $ref: '#/components/schemas/EntityType'
        entity_id:
          type: string
          format: uuid
        reference_id:
          type: string
        title:
          type: string

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Epics
    description: Epic management operations
  - name: User Stories
    description: User story management operations
  - name: Acceptance Criteria
    description: Acceptance criteria management operations
  - name: Requirements
    description: Requirement management operations
  - name: Search
    description: Search and discovery operations
  - name: Navigation
    description: Hierarchy and navigation operations
  - name: Comments
    description: Comment system operations
  - name: Configuration
    description: System configuration management