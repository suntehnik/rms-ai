{
  "endpoints": [
    {
      "Method": "patch",
      "Path": "/api/v1/user-stories/{id}/assign",
      "Summary": "Assign user story to user",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AssignmentRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "User story assigned",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserStory"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/acceptance-criteria/{id}",
      "Summary": "Get acceptance criteria by ID",
      "Description": "",
      "Tags": [
        "Acceptance Criteria"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Acceptance criteria details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptanceCriteria"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "put",
      "Path": "/api/v1/acceptance-criteria/{id}",
      "Summary": "Update acceptance criteria",
      "Description": "",
      "Tags": [
        "Acceptance Criteria"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateAcceptanceCriteriaRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Acceptance criteria updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptanceCriteria"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/api/v1/acceptance-criteria/{id}",
      "Summary": "Delete acceptance criteria",
      "Description": "",
      "Tags": [
        "Acceptance Criteria"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "Acceptance criteria deleted"
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/status-models",
      "Summary": "List status models",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of status models",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusModelListResponse"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "post",
      "Path": "/api/v1/config/status-models",
      "Summary": "Create status model",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateStatusModelRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Status model created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusModel"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/status-models/default/{entity_type}",
      "Summary": "Get default status model for entity type",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": [
        {
          "name": "entity_type",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EntityType"
          }
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Default status model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusModel"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "post",
      "Path": "/api/v1/user-stories/{id}/comments/inline",
      "Summary": "Create user story inline comment",
      "Description": "",
      "Tags": [
        "User Stories",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateInlineCommentRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Inline comment created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "patch",
      "Path": "/api/v1/epics/{id}/status",
      "Summary": "Change epic status",
      "Description": "",
      "Tags": [
        "Epics"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StatusChangeRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Status changed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Epic"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "patch",
      "Path": "/api/v1/user-stories/{id}/status",
      "Summary": "Change user story status",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StatusChangeRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Status changed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserStory"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/user-stories/{id}/validate-deletion",
      "Summary": "Validate user story deletion",
      "Description": "Check if user story can be deleted and get dependency information",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Deletion validation result",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependencyInfo"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/status-models/{id}/statuses",
      "Summary": "List statuses by model",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of statuses",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusListResponse"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/statuses/{id}",
      "Summary": "Get status by ID",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Status details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Status"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "put",
      "Path": "/api/v1/config/statuses/{id}",
      "Summary": "Update status",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateStatusRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Status updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Status"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "delete",
      "Path": "/api/v1/config/statuses/{id}",
      "Summary": "Delete status",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "Status deleted"
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/ready",
      "Summary": "Readiness check",
      "Description": "Check if the application is ready to serve requests",
      "Tags": [
        "Health"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Application is ready",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckResponse"
              }
            }
          }
        },
        "503": {
          "description": "Application is not ready",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckResponse"
              }
            }
          }
        }
      },
      "Security": []
    },
    {
      "Method": "get",
      "Path": "/api/v1/acceptance-criteria/{id}/validate-deletion",
      "Summary": "Validate acceptance criteria deletion",
      "Description": "Check if acceptance criteria can be deleted and get dependency information",
      "Tags": [
        "Acceptance Criteria"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Deletion validation result",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependencyInfo"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/requirements/relationships",
      "Summary": "Create requirement relationship",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateRelationshipRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Relationship created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequirementRelationship"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/deletion/confirm",
      "Summary": "Get deletion confirmation",
      "Description": "Get deletion validation information for any entity type using query parameters",
      "Tags": [
        "Deletion"
      ],
      "Parameters": [
        {
          "name": "entity_type",
          "in": "query",
          "description": "Type of entity to validate deletion for",
          "required": true,
          "schema": {
            "enum": [
              "epic",
              "user_story",
              "acceptance_criteria",
              "requirement"
            ],
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "query",
          "description": "Entity ID to validate deletion for",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Deletion validation result",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependencyInfo"
              }
            }
          }
        },
        "400": {
          "description": "Bad request - missing or invalid parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        },
        "404": {
          "description": "Entity not found",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        },
        "500": {
          "description": "Internal server error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/live",
      "Summary": "Liveness check",
      "Description": "Check if the application is alive",
      "Tags": [
        "Health"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Application is alive",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckResponse"
              }
            }
          }
        }
      },
      "Security": []
    },
    {
      "Method": "get",
      "Path": "/api/v1/search",
      "Summary": "Global search",
      "Description": "",
      "Tags": [
        "Search"
      ],
      "Parameters": [
        {
          "name": "q",
          "in": "query",
          "description": "Search query",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "entity_types",
          "in": "query",
          "description": "Comma-separated entity types to search",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Search results",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchResponse"
              }
            }
          }
        },
        "401": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/hierarchy/user-stories/{id}",
      "Summary": "Get user story hierarchy",
      "Description": "",
      "Tags": [
        "Navigation"
      ],
      "Parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "User story ID (UUID or reference ID)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "User story hierarchy",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HierarchyNode"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/config/statuses",
      "Summary": "Create status",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateStatusRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Status created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Status"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/status-transitions/{id}",
      "Summary": "Get status transition by ID",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Status transition details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusTransition"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "put",
      "Path": "/api/v1/config/status-transitions/{id}",
      "Summary": "Update status transition",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateStatusTransitionRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Status transition updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusTransition"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "delete",
      "Path": "/api/v1/config/status-transitions/{id}",
      "Summary": "Delete status transition",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "Status transition deleted"
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/auth/profile",
      "Summary": "Get current user profile",
      "Description": "Get the profile information of the currently authenticated user",
      "Tags": [
        "Authentication"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "User profile",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/api/v1/user-stories/{id}/requirements",
      "Summary": "Get user story requirements",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "User story with requirements",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserStory"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/user-stories/{id}/requirements",
      "Summary": "Create requirement in user story",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateRequirementRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Requirement created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Requirement"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/user-stories/{id}/comments",
      "Summary": "Get user story comments",
      "Description": "",
      "Tags": [
        "User Stories",
        "Comments"
      ],
      "Parameters": [
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of user story comments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/user-stories/{id}/comments",
      "Summary": "Create user story comment",
      "Description": "",
      "Tags": [
        "User Stories",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateCommentRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Comment created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/requirements/search",
      "Summary": "Search requirements",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": [
        {
          "name": "q",
          "in": "query",
          "description": "Search query",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Search results",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/requirement-types",
      "Summary": "List requirement types",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of requirement types",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequirementTypeListResponse"
              }
            }
          }
        },
        "401": {
          "description": ""
        },
        "403": {
          "description": ""
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "post",
      "Path": "/api/v1/config/requirement-types",
      "Summary": "Create requirement type",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateRequirementTypeRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Requirement type created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequirementType"
              }
            }
          }
        },
        "400": {
          "description": ""
        },
        "401": {
          "description": ""
        },
        "403": {
          "description": ""
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/api/v1/user-stories/{id}",
      "Summary": "Get user story by ID",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "User story details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserStory"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "put",
      "Path": "/api/v1/user-stories/{id}",
      "Summary": "Update user story",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateUserStoryRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "User story updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserStory"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/api/v1/user-stories/{id}",
      "Summary": "Delete user story",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "User story deleted"
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/hierarchy/path/{entity_type}/{id}",
      "Summary": "Get entity breadcrumb path",
      "Description": "",
      "Tags": [
        "Navigation"
      ],
      "Parameters": [
        {
          "name": "entity_type",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EntityType"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Entity path",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "path": {
                    "items": {
                      "$ref": "#/components/schemas/EntityPath"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/epics/{id}",
      "Summary": "Get epic by ID",
      "Description": "",
      "Tags": [
        "Epics"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Epic details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Epic"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "put",
      "Path": "/api/v1/epics/{id}",
      "Summary": "Update epic",
      "Description": "",
      "Tags": [
        "Epics"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateEpicRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Epic updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Epic"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/api/v1/epics/{id}",
      "Summary": "Delete epic",
      "Description": "",
      "Tags": [
        "Epics"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "Epic deleted"
        },
        "409": {
          "description": "Cannot delete due to dependencies",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/epics/{id}/user-stories",
      "Summary": "Get epic with user stories",
      "Description": "",
      "Tags": [
        "Epics"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Epic with user stories",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Epic"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/epics/{id}/user-stories",
      "Summary": "Create user story in epic",
      "Description": "",
      "Tags": [
        "Epics"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateUserStoryRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "User story created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserStory"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/epics/{id}/comments",
      "Summary": "Get epic comments",
      "Description": "Retrieve all comments associated with a specific epic, including both general and inline comments",
      "Tags": [
        "Epics",
        "Comments"
      ],
      "Parameters": [
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of epic comments retrieved successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentListResponse"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/epics/{id}/comments",
      "Summary": "Create epic comment",
      "Description": "Create a new general comment on an epic",
      "Tags": [
        "Epics",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateCommentRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Comment created successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "400": {
          "description": ""
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "patch",
      "Path": "/api/v1/requirements/{id}/status",
      "Summary": "Change requirement status",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StatusChangeRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Status changed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Requirement"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/comments/{id}/unresolve",
      "Summary": "Unresolve comment",
      "Description": "Mark a previously resolved comment as unresolved, reopening the discussion",
      "Tags": [
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Comment unresolved successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/status-models/{id}",
      "Summary": "Get status model by ID",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Status model details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusModel"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "put",
      "Path": "/api/v1/config/status-models/{id}",
      "Summary": "Update status model",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateStatusModelRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Status model updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusModel"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "delete",
      "Path": "/api/v1/config/status-models/{id}",
      "Summary": "Delete status model",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "Status model deleted"
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/status-models/{id}/transitions",
      "Summary": "List status transitions by model",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of status transitions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusTransitionListResponse"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/auth/users/{id}",
      "Summary": "Get user by ID (Admin only)",
      "Description": "Get user details by ID",
      "Tags": [
        "Authentication",
        "User Management"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "User details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "401": {
          "description": ""
        },
        "403": {
          "description": ""
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "put",
      "Path": "/auth/users/{id}",
      "Summary": "Update user (Admin only)",
      "Description": "Update user information",
      "Tags": [
        "Authentication",
        "User Management"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateUserRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "User updated successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "400": {
          "description": ""
        },
        "401": {
          "description": ""
        },
        "403": {
          "description": ""
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/auth/users/{id}",
      "Summary": "Delete user (Admin only)",
      "Description": "Delete user account",
      "Tags": [
        "Authentication",
        "User Management"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "User deleted successfully"
        },
        "401": {
          "description": ""
        },
        "403": {
          "description": ""
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/api/v1/acceptance-criteria/{id}/delete",
      "Summary": "Comprehensive acceptance criteria deletion",
      "Description": "Delete acceptance criteria with all dependencies and cascade operations",
      "Tags": [
        "Acceptance Criteria"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Deletion completed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletionResult"
              }
            }
          }
        },
        "409": {
          "description": "Cannot delete due to dependencies",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/requirements/{id}",
      "Summary": "Get requirement by ID",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Requirement details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Requirement"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "put",
      "Path": "/api/v1/requirements/{id}",
      "Summary": "Update requirement",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateRequirementRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Requirement updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Requirement"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/api/v1/requirements/{id}",
      "Summary": "Delete requirement",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "Requirement deleted"
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/requirements/{id}/relationships",
      "Summary": "Get requirement with relationships",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Requirement with relationships",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Requirement"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/requirements/{id}/comments/inline/validate",
      "Summary": "Validate requirement inline comments",
      "Description": "",
      "Tags": [
        "Requirements",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InlineCommentValidationRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Validation result",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/hierarchy",
      "Summary": "Get full hierarchy",
      "Description": "",
      "Tags": [
        "Navigation"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Complete hierarchy tree",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "hierarchy": {
                    "items": {
                      "$ref": "#/components/schemas/HierarchyNode"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/config/status-transitions",
      "Summary": "Create status transition",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateStatusTransitionRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Status transition created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusTransition"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/api/v1/epics/{id}/validate-deletion",
      "Summary": "Validate epic deletion",
      "Description": "Check if epic can be deleted and get dependency information",
      "Tags": [
        "Epics"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Deletion validation result",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependencyInfo"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/acceptance-criteria/{id}/comments/inline/visible",
      "Summary": "Get visible acceptance criteria inline comments",
      "Description": "",
      "Tags": [
        "Acceptance Criteria",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of visible inline comments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/epics",
      "Summary": "List epics",
      "Description": "",
      "Tags": [
        "Epics"
      ],
      "Parameters": [
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "status",
          "in": "query",
          "schema": {
            "$ref": "#/components/schemas/EpicStatus"
          }
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of epics",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpicListResponse"
              }
            }
          }
        },
        "401": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/epics",
      "Summary": "Create epic",
      "Description": "",
      "Tags": [
        "Epics"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateEpicRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Epic created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Epic"
              }
            }
          }
        },
        "400": {
          "description": ""
        },
        "401": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "patch",
      "Path": "/api/v1/epics/{id}/assign",
      "Summary": "Assign epic to user",
      "Description": "",
      "Tags": [
        "Epics"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AssignmentRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Epic assigned",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Epic"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/acceptance-criteria/{id}/comments",
      "Summary": "Get acceptance criteria comments",
      "Description": "",
      "Tags": [
        "Acceptance Criteria",
        "Comments"
      ],
      "Parameters": [
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of acceptance criteria comments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/acceptance-criteria/{id}/comments",
      "Summary": "Create acceptance criteria comment",
      "Description": "",
      "Tags": [
        "Acceptance Criteria",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateCommentRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Comment created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/requirements/{id}/validate-deletion",
      "Summary": "Validate requirement deletion",
      "Description": "Check if requirement can be deleted and get dependency information",
      "Tags": [
        "Requirements"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Deletion validation result",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependencyInfo"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/comments/{id}",
      "Summary": "Get comment by ID",
      "Description": "Retrieve a specific comment with its details and optional populated fields",
      "Tags": [
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Comment details retrieved successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "put",
      "Path": "/api/v1/comments/{id}",
      "Summary": "Update comment",
      "Description": "Update the content of an existing comment",
      "Tags": [
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateCommentRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Comment updated successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "400": {
          "description": ""
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/api/v1/comments/{id}",
      "Summary": "Delete comment",
      "Description": "Delete a comment and all its replies (cascade deletion)",
      "Tags": [
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "Comment deleted successfully"
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/epics/{id}/comments/inline/validate",
      "Summary": "Validate epic inline comments",
      "Description": "Validate that inline comment positions are still valid against the current epic content",
      "Tags": [
        "Epics",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InlineCommentValidationRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Validation completed successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationResponse"
              }
            }
          }
        },
        "400": {
          "description": ""
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/api/v1/epics/{id}/delete",
      "Summary": "Comprehensive epic deletion",
      "Description": "Delete epic with all dependencies and cascade operations",
      "Tags": [
        "Epics"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Deletion completed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletionResult"
              }
            }
          }
        },
        "409": {
          "description": "Cannot delete due to dependencies",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/epics/{id}/comments/inline",
      "Summary": "Create epic inline comment",
      "Description": "",
      "Tags": [
        "Epics",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateInlineCommentRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Inline comment created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/acceptance-criteria/{id}/comments/inline",
      "Summary": "Create acceptance criteria inline comment",
      "Description": "",
      "Tags": [
        "Acceptance Criteria",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateInlineCommentRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Inline comment created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/requirements/{id}/comments/inline/visible",
      "Summary": "Get visible requirement inline comments",
      "Description": "",
      "Tags": [
        "Requirements",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of visible inline comments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/comments/status/{status}",
      "Summary": "Get comments by status",
      "Description": "Retrieve comments filtered by their resolution status across all entities",
      "Tags": [
        "Comments"
      ],
      "Parameters": [
        {
          "name": "status",
          "in": "path",
          "description": "Filter comments by resolution status",
          "required": true,
          "schema": {
            "enum": [
              "resolved",
              "unresolved"
            ],
            "type": "string"
          }
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of comments filtered by status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentListResponse"
              }
            }
          }
        },
        "400": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/user-stories",
      "Summary": "List user stories",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": [
        {
          "name": "epic_id",
          "in": "query",
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "status",
          "in": "query",
          "schema": {
            "$ref": "#/components/schemas/UserStoryStatus"
          }
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of user stories",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserStoryListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/user-stories",
      "Summary": "Create user story",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateUserStoryRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "User story created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserStory"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/api/v1/user-stories/{id}/delete",
      "Summary": "Comprehensive user story deletion",
      "Description": "Delete user story with all dependencies and cascade operations",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Deletion completed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletionResult"
              }
            }
          }
        },
        "409": {
          "description": "Cannot delete due to dependencies",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/requirements/{id}/comments",
      "Summary": "Get requirement comments",
      "Description": "",
      "Tags": [
        "Requirements",
        "Comments"
      ],
      "Parameters": [
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of requirement comments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/requirements/{id}/comments",
      "Summary": "Create requirement comment",
      "Description": "",
      "Tags": [
        "Requirements",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateCommentRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Comment created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/user-stories/{id}/acceptance-criteria",
      "Summary": "Get user story acceptance criteria",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of acceptance criteria",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptanceCriteriaListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/user-stories/{id}/acceptance-criteria",
      "Summary": "Create acceptance criteria in user story",
      "Description": "",
      "Tags": [
        "User Stories"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateAcceptanceCriteriaRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Acceptance criteria created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptanceCriteria"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/requirements/{id}/comments/inline",
      "Summary": "Create requirement inline comment",
      "Description": "",
      "Tags": [
        "Requirements",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateInlineCommentRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Inline comment created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/comments/{id}/replies",
      "Summary": "Get comment replies",
      "Description": "Retrieve all replies to a specific comment with pagination support",
      "Tags": [
        "Comments"
      ],
      "Parameters": [
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of comment replies retrieved successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentListResponse"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/comments/{id}/replies",
      "Summary": "Create comment reply",
      "Description": "Create a new reply to an existing comment, establishing a parent-child relationship",
      "Tags": [
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateCommentRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Reply created successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "400": {
          "description": ""
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/requirement-types/{id}",
      "Summary": "Get requirement type by ID",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Requirement type details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequirementType"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "put",
      "Path": "/api/v1/config/requirement-types/{id}",
      "Summary": "Update requirement type",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateRequirementTypeRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Requirement type updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequirementType"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "delete",
      "Path": "/api/v1/config/requirement-types/{id}",
      "Summary": "Delete requirement type",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "Requirement type deleted"
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "post",
      "Path": "/auth/login",
      "Summary": "User login",
      "Description": "Authenticate user and receive JWT token",
      "Tags": [
        "Authentication"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LoginRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Login successful",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginResponse"
              }
            }
          }
        },
        "401": {
          "description": "Invalid credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      },
      "Security": []
    },
    {
      "Method": "get",
      "Path": "/api/v1/epics/{id}/comments/inline/visible",
      "Summary": "Get visible epic inline comments",
      "Description": "",
      "Tags": [
        "Epics",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of visible inline comments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/acceptance-criteria",
      "Summary": "List acceptance criteria",
      "Description": "",
      "Tags": [
        "Acceptance Criteria"
      ],
      "Parameters": [
        {
          "name": "user_story_id",
          "in": "query",
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        },
        {
          "name": "author_id",
          "in": "query",
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of acceptance criteria",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptanceCriteriaListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/hierarchy/epics/{id}",
      "Summary": "Get epic hierarchy",
      "Description": "",
      "Tags": [
        "Navigation"
      ],
      "Parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Epic ID (UUID or reference ID)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Epic hierarchy",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HierarchyNode"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/comments/{id}/resolve",
      "Summary": "Resolve comment",
      "Description": "Mark a comment as resolved, indicating that the issue or question has been addressed",
      "Tags": [
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Comment resolved successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/relationship-types",
      "Summary": "List relationship types",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of relationship types",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipTypeListResponse"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "post",
      "Path": "/api/v1/config/relationship-types",
      "Summary": "Create relationship type",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateRelationshipTypeRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Relationship type created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipType"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "post",
      "Path": "/auth/change-password",
      "Summary": "Change user password",
      "Description": "Change the password for the currently authenticated user",
      "Tags": [
        "Authentication"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChangePasswordRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Password changed successfully"
        },
        "400": {
          "description": "Invalid request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/auth/users",
      "Summary": "List users (Admin only)",
      "Description": "Get list of all users",
      "Tags": [
        "Authentication",
        "User Management"
      ],
      "Parameters": [
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of users",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserListResponse"
              }
            }
          }
        },
        "401": {
          "description": ""
        },
        "403": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/auth/users",
      "Summary": "Create user (Admin only)",
      "Description": "Create a new user account",
      "Tags": [
        "Authentication",
        "User Management"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateUserRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "User created successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "400": {
          "description": ""
        },
        "401": {
          "description": ""
        },
        "403": {
          "description": ""
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/user-stories/{id}/comments/inline/validate",
      "Summary": "Validate user story inline comments",
      "Description": "",
      "Tags": [
        "User Stories",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InlineCommentValidationRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Validation result",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/acceptance-criteria/{id}/comments/inline/validate",
      "Summary": "Validate acceptance criteria inline comments",
      "Description": "",
      "Tags": [
        "Acceptance Criteria",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InlineCommentValidationRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Validation result",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "patch",
      "Path": "/api/v1/requirements/{id}/assign",
      "Summary": "Assign requirement to user",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AssignmentRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Requirement assigned",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Requirement"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/config/relationship-types/{id}",
      "Summary": "Get relationship type by ID",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Relationship type details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipType"
              }
            }
          }
        },
        "404": {
          "description": ""
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "put",
      "Path": "/api/v1/config/relationship-types/{id}",
      "Summary": "Update relationship type",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateRelationshipTypeRequest"
            }
          }
        }
      },
      "Responses": {
        "200": {
          "description": "Relationship type updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipType"
              }
            }
          }
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "delete",
      "Path": "/api/v1/config/relationship-types/{id}",
      "Summary": "Delete relationship type",
      "Description": "",
      "Tags": [
        "Configuration"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "Relationship type deleted"
        }
      },
      "Security": [
        {
          "BearerAuth": []
        }
      ]
    },
    {
      "Method": "get",
      "Path": "/api/v1/user-stories/{id}/comments/inline/visible",
      "Summary": "Get visible user story inline comments",
      "Description": "",
      "Tags": [
        "User Stories",
        "Comments"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of visible inline comments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/requirements",
      "Summary": "List requirements",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": [
        {
          "name": "user_story_id",
          "in": "query",
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        },
        {
          "name": "acceptance_criteria_id",
          "in": "query",
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        },
        {
          "name": "type_id",
          "in": "query",
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "status",
          "in": "query",
          "schema": {
            "$ref": "#/components/schemas/RequirementStatus"
          }
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        },
        {
          "name": "",
          "in": ""
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "List of requirements",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequirementListResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "post",
      "Path": "/api/v1/requirements",
      "Summary": "Create requirement",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": null,
      "RequestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateRequirementRequest"
            }
          }
        }
      },
      "Responses": {
        "201": {
          "description": "Requirement created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Requirement"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/api/v1/requirements/{id}/delete",
      "Summary": "Comprehensive requirement deletion",
      "Description": "Delete requirement with all dependencies and cascade operations",
      "Tags": [
        "Requirements"
      ],
      "Parameters": null,
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Deletion completed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletionResult"
              }
            }
          }
        },
        "409": {
          "description": "Cannot delete due to dependencies",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "get",
      "Path": "/api/v1/search/suggestions",
      "Summary": "Get search suggestions",
      "Description": "",
      "Tags": [
        "Search"
      ],
      "Parameters": [
        {
          "name": "query",
          "in": "query",
          "description": "Partial search query",
          "required": true,
          "schema": {
            "minLength": 2,
            "type": "string"
          }
        },
        {
          "name": "limit",
          "in": "query",
          "description": "Maximum suggestions per category",
          "schema": {
            "default": 10,
            "maximum": 50,
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "RequestBody": null,
      "Responses": {
        "200": {
          "description": "Search suggestions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSuggestionsResponse"
              }
            }
          }
        }
      },
      "Security": null
    },
    {
      "Method": "delete",
      "Path": "/api/v1/requirement-relationships/{id}",
      "Summary": "Delete requirement relationship",
      "Description": "",
      "Tags": [
        "Requirements"
      ],
      "Parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "RequestBody": null,
      "Responses": {
        "204": {
          "description": "Relationship deleted"
        },
        "404": {
          "description": ""
        }
      },
      "Security": null
    }
  ],
  "info": {
    "title": "Product Requirements Management API",
    "description": "Comprehensive API for managing product requirements through hierarchical structure of Epics → User Stories → Requirements. \nFeatures include full-text search, comment system, relationship mapping, and configurable workflows.\n",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "url": "http://www.swagger.io/support",
      "email": "support@swagger.io"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "metadata": {
    "generated_at": "auto-generated",
    "openapi_version": "3.0.3",
    "total_endpoints": 114,
    "total_tags": 12
  },
  "schemas": {
    "AcceptanceCriteria": {
      "properties": {
        "author": {
          "$ref": "#/components/schemas/User"
        },
        "author_id": {
          "format": "uuid",
          "type": "string"
        },
        "comments": {
          "items": {
            "$ref": "#/components/schemas/Comment"
          },
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "last_modified": {
          "format": "date-time",
          "type": "string"
        },
        "reference_id": {
          "pattern": "^AC-\\d+$",
          "type": "string"
        },
        "requirements": {
          "items": {
            "$ref": "#/components/schemas/Requirement"
          },
          "type": "array"
        },
        "user_story": {
          "$ref": "#/components/schemas/UserStory"
        },
        "user_story_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "id",
        "reference_id",
        "description",
        "user_story_id",
        "author_id",
        "created_at",
        "last_modified"
      ],
      "type": "object"
    },
    "AcceptanceCriteriaListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/AcceptanceCriteria"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "AssignmentRequest": {
      "properties": {
        "assignee_id": {
          "format": "uuid",
          "nullable": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChangePasswordRequest": {
      "properties": {
        "current_password": {
          "type": "string"
        },
        "new_password": {
          "minLength": 8,
          "type": "string"
        }
      },
      "required": [
        "current_password",
        "new_password"
      ],
      "type": "object"
    },
    "Comment": {
      "properties": {
        "author": {
          "$ref": "#/components/schemas/User",
          "description": "Author user object (populated when include=author)"
        },
        "author_id": {
          "description": "UUID of the user who created the comment",
          "format": "uuid",
          "type": "string"
        },
        "content": {
          "description": "The text content of the comment",
          "example": "This requirement needs clarification on the user authentication flow.",
          "type": "string"
        },
        "created_at": {
          "description": "Timestamp when the comment was created",
          "example": "2024-01-15T10:30:00Z",
          "format": "date-time",
          "type": "string"
        },
        "entity_id": {
          "description": "UUID of the entity this comment is attached to",
          "format": "uuid",
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/components/schemas/EntityType",
          "description": "Type of entity this comment is attached to"
        },
        "id": {
          "description": "Unique identifier for the comment",
          "format": "uuid",
          "type": "string"
        },
        "is_resolved": {
          "description": "Whether the comment has been resolved",
          "example": false,
          "type": "boolean"
        },
        "linked_text": {
          "description": "Text that this inline comment is linked to (for inline comments only)",
          "example": "user authentication",
          "type": "string"
        },
        "parent_comment": {
          "$ref": "#/components/schemas/Comment",
          "description": "Parent comment object (populated for replies)"
        },
        "parent_comment_id": {
          "description": "UUID of the parent comment if this is a reply",
          "format": "uuid",
          "type": "string"
        },
        "replies": {
          "description": "Array of reply comments (populated when include=replies)",
          "items": {
            "$ref": "#/components/schemas/Comment"
          },
          "type": "array"
        },
        "text_position_end": {
          "description": "End position of the linked text (for inline comments only)",
          "example": 63,
          "minimum": 0,
          "type": "integer"
        },
        "text_position_start": {
          "description": "Start position of the linked text (for inline comments only)",
          "example": 45,
          "minimum": 0,
          "type": "integer"
        },
        "updated_at": {
          "description": "Timestamp when the comment was last updated",
          "example": "2024-01-15T14:20:00Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "content",
        "entity_type",
        "entity_id",
        "author_id",
        "is_resolved",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "CommentListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/Comment"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "CreateAcceptanceCriteriaRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "user_story_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "description",
        "user_story_id"
      ],
      "type": "object"
    },
    "CreateCommentRequest": {
      "properties": {
        "content": {
          "description": "The text content of the comment",
          "example": "This requirement needs clarification on the user authentication flow.",
          "maxLength": 5000,
          "type": "string"
        },
        "parent_comment_id": {
          "description": "UUID of the parent comment if creating a reply (optional)",
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "content"
      ],
      "type": "object"
    },
    "CreateEpicRequest": {
      "properties": {
        "assignee_id": {
          "format": "uuid",
          "type": "string"
        },
        "creator_id": {
          "format": "uuid",
          "type": "string"
        },
        "description": {
          "maxLength": 5000,
          "type": "string"
        },
        "priority": {
          "$ref": "#/components/schemas/Priority"
        },
        "title": {
          "maxLength": 500,
          "type": "string"
        }
      },
      "required": [
        "title",
        "priority",
        "creator_id"
      ],
      "type": "object"
    },
    "CreateInlineCommentRequest": {
      "properties": {
        "content": {
          "description": "The text content of the inline comment",
          "example": "This term needs better definition",
          "maxLength": 5000,
          "type": "string"
        },
        "linked_text": {
          "description": "The exact text that this comment is linked to",
          "example": "user authentication",
          "type": "string"
        },
        "text_position_end": {
          "description": "End character position of the linked text in the entity content",
          "example": 63,
          "minimum": 0,
          "type": "integer"
        },
        "text_position_start": {
          "description": "Start character position of the linked text in the entity content",
          "example": 45,
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "content",
        "linked_text",
        "text_position_start",
        "text_position_end"
      ],
      "type": "object"
    },
    "CreateRelationshipRequest": {
      "properties": {
        "relationship_type_id": {
          "description": "UUID of the relationship type",
          "format": "uuid",
          "type": "string"
        },
        "source_requirement_id": {
          "description": "UUID of the source requirement",
          "format": "uuid",
          "type": "string"
        },
        "target_requirement_id": {
          "description": "UUID of the target requirement",
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "source_requirement_id",
        "target_requirement_id",
        "relationship_type_id"
      ],
      "type": "object"
    },
    "CreateRelationshipTypeRequest": {
      "properties": {
        "description": {
          "maxLength": 500,
          "type": "string"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CreateRequirementRequest": {
      "properties": {
        "acceptance_criteria_id": {
          "format": "uuid",
          "type": "string"
        },
        "assignee_id": {
          "format": "uuid",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "priority": {
          "$ref": "#/components/schemas/Priority"
        },
        "title": {
          "maxLength": 500,
          "type": "string"
        },
        "type_id": {
          "format": "uuid",
          "type": "string"
        },
        "user_story_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "title",
        "priority",
        "user_story_id",
        "type_id"
      ],
      "type": "object"
    },
    "CreateRequirementTypeRequest": {
      "properties": {
        "description": {
          "maxLength": 500,
          "type": "string"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CreateStatusModelRequest": {
      "properties": {
        "description": {
          "maxLength": 500,
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/components/schemas/EntityType"
        },
        "is_default": {
          "default": false,
          "type": "boolean"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        }
      },
      "required": [
        "name",
        "entity_type"
      ],
      "type": "object"
    },
    "CreateStatusRequest": {
      "properties": {
        "color": {
          "pattern": "^#[0-9A-Fa-f]{6}$",
          "type": "string"
        },
        "description": {
          "maxLength": 200,
          "type": "string"
        },
        "is_final": {
          "default": false,
          "type": "boolean"
        },
        "is_initial": {
          "default": false,
          "type": "boolean"
        },
        "name": {
          "maxLength": 50,
          "type": "string"
        },
        "order": {
          "minimum": 0,
          "type": "integer"
        },
        "status_model_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "name",
        "order",
        "status_model_id"
      ],
      "type": "object"
    },
    "CreateStatusTransitionRequest": {
      "properties": {
        "description": {
          "maxLength": 200,
          "type": "string"
        },
        "from_status_id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        },
        "status_model_id": {
          "format": "uuid",
          "type": "string"
        },
        "to_status_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "from_status_id",
        "to_status_id",
        "status_model_id"
      ],
      "type": "object"
    },
    "CreateUserRequest": {
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "password": {
          "minLength": 8,
          "type": "string"
        },
        "role": {
          "$ref": "#/components/schemas/UserRole"
        },
        "username": {
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        }
      },
      "required": [
        "username",
        "email",
        "password",
        "role"
      ],
      "type": "object"
    },
    "CreateUserStoryRequest": {
      "properties": {
        "assignee_id": {
          "format": "uuid",
          "type": "string"
        },
        "description": {
          "maxLength": 2000,
          "type": "string"
        },
        "epic_id": {
          "format": "uuid",
          "type": "string"
        },
        "priority": {
          "$ref": "#/components/schemas/Priority"
        },
        "title": {
          "maxLength": 500,
          "type": "string"
        }
      },
      "required": [
        "title",
        "priority",
        "epic_id"
      ],
      "type": "object"
    },
    "DeletedEntity": {
      "properties": {
        "entity_id": {
          "description": "UUID of the deleted entity",
          "format": "uuid",
          "type": "string"
        },
        "entity_type": {
          "description": "Type of the deleted entity",
          "type": "string"
        },
        "reference_id": {
          "description": "Human-readable reference ID of the deleted entity",
          "type": "string"
        }
      },
      "required": [
        "entity_type",
        "entity_id",
        "reference_id"
      ],
      "type": "object"
    },
    "DeletionResult": {
      "properties": {
        "deleted_entities": {
          "description": "List of entities that were deleted",
          "items": {
            "$ref": "#/components/schemas/DeletedEntity"
          },
          "type": "array"
        },
        "message": {
          "description": "Human-readable message about the deletion result",
          "type": "string"
        },
        "success": {
          "description": "Whether the deletion operation was successful",
          "type": "boolean"
        }
      },
      "required": [
        "success",
        "deleted_entities",
        "message"
      ],
      "type": "object"
    },
    "DependencyInfo": {
      "properties": {
        "can_delete": {
          "description": "Whether the entity can be safely deleted",
          "type": "boolean"
        },
        "dependencies": {
          "description": "List of entities that depend on this entity",
          "items": {
            "$ref": "#/components/schemas/DependencyItem"
          },
          "type": "array"
        },
        "warnings": {
          "description": "Warning messages about the deletion",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "can_delete",
        "dependencies",
        "warnings"
      ],
      "type": "object"
    },
    "DependencyItem": {
      "properties": {
        "dependency_type": {
          "description": "Type of dependency (e.g., 'child', 'reference', 'relationship')",
          "type": "string"
        },
        "entity_id": {
          "description": "UUID of the dependent entity",
          "format": "uuid",
          "type": "string"
        },
        "entity_type": {
          "description": "Type of the dependent entity",
          "type": "string"
        },
        "reference_id": {
          "description": "Human-readable reference ID of the dependent entity",
          "type": "string"
        },
        "title": {
          "description": "Title of the dependent entity",
          "type": "string"
        }
      },
      "required": [
        "entity_type",
        "entity_id",
        "reference_id",
        "title",
        "dependency_type"
      ],
      "type": "object"
    },
    "EntityPath": {
      "properties": {
        "entity_id": {
          "format": "uuid",
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/components/schemas/EntityType"
        },
        "reference_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "entity_type",
        "entity_id",
        "reference_id",
        "title"
      ],
      "type": "object"
    },
    "EntityType": {
      "enum": [
        "epic",
        "user_story",
        "acceptance_criteria",
        "requirement"
      ],
      "type": "string"
    },
    "Epic": {
      "description": "High-level feature or initiative containing multiple user stories",
      "properties": {
        "assignee": {
          "$ref": "#/components/schemas/User"
        },
        "assignee_id": {
          "format": "uuid",
          "type": "string"
        },
        "comments": {
          "items": {
            "$ref": "#/components/schemas/Comment"
          },
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "creator": {
          "$ref": "#/components/schemas/User"
        },
        "creator_id": {
          "format": "uuid",
          "type": "string"
        },
        "description": {
          "maxLength": 5000,
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "last_modified": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "$ref": "#/components/schemas/Priority"
        },
        "reference_id": {
          "pattern": "^EP-\\d+$",
          "type": "string"
        },
        "status": {
          "$ref": "#/components/schemas/EpicStatus"
        },
        "title": {
          "maxLength": 500,
          "type": "string"
        },
        "user_stories": {
          "items": {
            "$ref": "#/components/schemas/UserStory"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "reference_id",
        "title",
        "status",
        "priority",
        "creator_id",
        "created_at",
        "last_modified"
      ],
      "type": "object"
    },
    "EpicListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/Epic"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "EpicStatus": {
      "enum": [
        "Backlog",
        "Draft",
        "In Progress",
        "Done",
        "Cancelled"
      ],
      "type": "string"
    },
    "ErrorResponse": {
      "description": "Standard error response with code and message",
      "properties": {
        "error": {
          "properties": {
            "code": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          },
          "required": [
            "code",
            "message"
          ],
          "type": "object"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "HealthCheckResponse": {
      "properties": {
        "reason": {
          "description": "Reason for the status (optional)",
          "type": "string"
        },
        "status": {
          "description": "Health check status",
          "enum": [
            "ok",
            "error"
          ],
          "type": "string"
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "HierarchyNode": {
      "properties": {
        "children": {
          "items": {
            "$ref": "#/components/schemas/HierarchyNode"
          },
          "type": "array"
        },
        "entity_id": {
          "format": "uuid",
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/components/schemas/EntityType"
        },
        "reference_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "entity_type",
        "entity_id",
        "reference_id",
        "title",
        "status"
      ],
      "type": "object"
    },
    "InlineCommentPosition": {
      "properties": {
        "comment_id": {
          "description": "UUID of the inline comment to validate",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid",
          "type": "string"
        },
        "text_position_end": {
          "description": "End character position of the comment in the entity content",
          "example": 63,
          "minimum": 0,
          "type": "integer"
        },
        "text_position_start": {
          "description": "Start character position of the comment in the entity content",
          "example": 45,
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "comment_id",
        "text_position_start",
        "text_position_end"
      ],
      "type": "object"
    },
    "InlineCommentValidationRequest": {
      "properties": {
        "comments": {
          "description": "List of inline comment positions to validate against current entity content",
          "example": [
            {
              "comment_id": "123e4567-e89b-12d3-a456-426614174000",
              "text_position_end": 63,
              "text_position_start": 45
            },
            {
              "comment_id": "987fcdeb-51a2-43d7-b123-456789abcdef",
              "text_position_end": 135,
              "text_position_start": 120
            }
          ],
          "items": {
            "$ref": "#/components/schemas/InlineCommentPosition"
          },
          "type": "array"
        }
      },
      "required": [
        "comments"
      ],
      "type": "object"
    },
    "ListResponse": {
      "properties": {
        "data": {
          "items": {},
          "type": "array"
        },
        "limit": {
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "offset": {
          "minimum": 0,
          "type": "integer"
        },
        "total_count": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "data",
        "total_count",
        "limit",
        "offset"
      ],
      "type": "object"
    },
    "LoginRequest": {
      "description": "User login credentials",
      "example": {
        "password": "securePassword123",
        "username": "john_doe"
      },
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "object"
    },
    "LoginResponse": {
      "properties": {
        "expires_at": {
          "format": "date-time",
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "user": {
          "$ref": "#/components/schemas/User"
        }
      },
      "required": [
        "token",
        "expires_at",
        "user"
      ],
      "type": "object"
    },
    "Priority": {
      "description": "1=Critical, 2=High, 3=Medium, 4=Low",
      "maximum": 4,
      "minimum": 1,
      "type": "integer"
    },
    "RelationshipType": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "RelationshipTypeListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/RelationshipType"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "Requirement": {
      "properties": {
        "acceptance_criteria": {
          "$ref": "#/components/schemas/AcceptanceCriteria"
        },
        "acceptance_criteria_id": {
          "format": "uuid",
          "type": "string"
        },
        "assignee": {
          "$ref": "#/components/schemas/User"
        },
        "assignee_id": {
          "format": "uuid",
          "type": "string"
        },
        "comments": {
          "items": {
            "$ref": "#/components/schemas/Comment"
          },
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "creator": {
          "$ref": "#/components/schemas/User"
        },
        "creator_id": {
          "format": "uuid",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "last_modified": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "$ref": "#/components/schemas/Priority"
        },
        "reference_id": {
          "pattern": "^REQ-\\d+$",
          "type": "string"
        },
        "source_relationships": {
          "items": {
            "$ref": "#/components/schemas/RequirementRelationship"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/components/schemas/RequirementStatus"
        },
        "target_relationships": {
          "items": {
            "$ref": "#/components/schemas/RequirementRelationship"
          },
          "type": "array"
        },
        "title": {
          "maxLength": 500,
          "type": "string"
        },
        "type": {
          "$ref": "#/components/schemas/RequirementType"
        },
        "type_id": {
          "format": "uuid",
          "type": "string"
        },
        "user_story": {
          "$ref": "#/components/schemas/UserStory"
        },
        "user_story_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "id",
        "reference_id",
        "title",
        "status",
        "priority",
        "user_story_id",
        "type_id",
        "creator_id",
        "created_at",
        "last_modified"
      ],
      "type": "object"
    },
    "RequirementListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/Requirement"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "RequirementRelationship": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        },
        "creator": {
          "$ref": "#/components/schemas/User"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "relationship_type": {
          "$ref": "#/components/schemas/RelationshipType"
        },
        "relationship_type_id": {
          "format": "uuid",
          "type": "string"
        },
        "source_requirement": {
          "$ref": "#/components/schemas/Requirement"
        },
        "source_requirement_id": {
          "format": "uuid",
          "type": "string"
        },
        "target_requirement": {
          "$ref": "#/components/schemas/Requirement"
        },
        "target_requirement_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "id",
        "source_requirement_id",
        "target_requirement_id",
        "relationship_type_id",
        "created_by",
        "created_at"
      ],
      "type": "object"
    },
    "RequirementStatus": {
      "enum": [
        "Draft",
        "Active",
        "Obsolete"
      ],
      "type": "string"
    },
    "RequirementType": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "RequirementTypeListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/RequirementType"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "SearchResponse": {
      "properties": {
        "entity_types": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "limit": {
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "offset": {
          "minimum": 0,
          "type": "integer"
        },
        "query": {
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/components/schemas/SearchResult"
          },
          "type": "array"
        },
        "total_count": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "results",
        "total_count",
        "query",
        "entity_types",
        "limit",
        "offset"
      ],
      "type": "object"
    },
    "SearchResult": {
      "properties": {
        "description": {
          "type": "string"
        },
        "entity_id": {
          "format": "uuid",
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/components/schemas/EntityType"
        },
        "highlight": {
          "type": "string"
        },
        "rank": {
          "type": "number"
        },
        "reference_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "entity_type",
        "entity_id",
        "reference_id",
        "title",
        "rank"
      ],
      "type": "object"
    },
    "SearchSuggestionsResponse": {
      "properties": {
        "reference_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "statuses": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "titles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "titles",
        "reference_ids",
        "statuses"
      ],
      "type": "object"
    },
    "Status": {
      "properties": {
        "color": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "from_transitions": {
          "items": {
            "$ref": "#/components/schemas/StatusTransition"
          },
          "type": "array"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "is_final": {
          "type": "boolean"
        },
        "is_initial": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "status_model": {
          "$ref": "#/components/schemas/StatusModel"
        },
        "status_model_id": {
          "format": "uuid",
          "type": "string"
        },
        "to_transitions": {
          "items": {
            "$ref": "#/components/schemas/StatusTransition"
          },
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "is_initial",
        "is_final",
        "status_model_id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "StatusChangeRequest": {
      "properties": {
        "status": {
          "type": "string"
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "StatusListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/Status"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "StatusModel": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/components/schemas/EntityType"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "statuses": {
          "items": {
            "$ref": "#/components/schemas/Status"
          },
          "type": "array"
        },
        "transitions": {
          "items": {
            "$ref": "#/components/schemas/StatusTransition"
          },
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "entity_type",
        "is_default",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "StatusModelListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/StatusModel"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "StatusTransition": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "from_status": {
          "$ref": "#/components/schemas/Status"
        },
        "from_status_id": {
          "format": "uuid",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status_model": {
          "$ref": "#/components/schemas/StatusModel"
        },
        "status_model_id": {
          "format": "uuid",
          "type": "string"
        },
        "to_status": {
          "$ref": "#/components/schemas/Status"
        },
        "to_status_id": {
          "format": "uuid",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "from_status_id",
        "to_status_id",
        "status_model_id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "StatusTransitionListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/StatusTransition"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "UpdateAcceptanceCriteriaRequest": {
      "properties": {
        "description": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateCommentRequest": {
      "properties": {
        "content": {
          "description": "Updated comment content",
          "example": "This requirement needs clarification on the user authentication flow and error handling.",
          "maxLength": 5000,
          "type": "string"
        }
      },
      "required": [
        "content"
      ],
      "type": "object"
    },
    "UpdateEpicRequest": {
      "properties": {
        "assignee_id": {
          "format": "uuid",
          "type": "string"
        },
        "description": {
          "maxLength": 5000,
          "type": "string"
        },
        "priority": {
          "$ref": "#/components/schemas/Priority"
        },
        "title": {
          "maxLength": 500,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateRelationshipTypeRequest": {
      "properties": {
        "description": {
          "maxLength": 500,
          "type": "string"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateRequirementRequest": {
      "properties": {
        "assignee_id": {
          "format": "uuid",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "priority": {
          "$ref": "#/components/schemas/Priority"
        },
        "title": {
          "maxLength": 500,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateRequirementTypeRequest": {
      "properties": {
        "description": {
          "maxLength": 500,
          "type": "string"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateStatusModelRequest": {
      "properties": {
        "description": {
          "maxLength": 500,
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateStatusRequest": {
      "properties": {
        "color": {
          "pattern": "^#[0-9A-Fa-f]{6}$",
          "type": "string"
        },
        "description": {
          "maxLength": 200,
          "type": "string"
        },
        "is_final": {
          "type": "boolean"
        },
        "is_initial": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 50,
          "type": "string"
        },
        "order": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UpdateStatusTransitionRequest": {
      "properties": {
        "description": {
          "maxLength": 200,
          "type": "string"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateUserRequest": {
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "role": {
          "$ref": "#/components/schemas/UserRole"
        },
        "username": {
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateUserStoryRequest": {
      "properties": {
        "assignee_id": {
          "format": "uuid",
          "type": "string"
        },
        "description": {
          "maxLength": 2000,
          "type": "string"
        },
        "priority": {
          "$ref": "#/components/schemas/Priority"
        },
        "title": {
          "maxLength": 500,
          "type": "string"
        }
      },
      "type": "object"
    },
    "User": {
      "description": "User account information with role-based access control",
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "format": "email",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "role": {
          "$ref": "#/components/schemas/UserRole"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "username": {
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "role",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "UserListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/User"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "UserRole": {
      "enum": [
        "Administrator",
        "User",
        "Commenter"
      ],
      "type": "string"
    },
    "UserStory": {
      "properties": {
        "acceptance_criteria": {
          "items": {
            "$ref": "#/components/schemas/AcceptanceCriteria"
          },
          "type": "array"
        },
        "assignee": {
          "$ref": "#/components/schemas/User"
        },
        "assignee_id": {
          "format": "uuid",
          "type": "string"
        },
        "comments": {
          "items": {
            "$ref": "#/components/schemas/Comment"
          },
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "creator": {
          "$ref": "#/components/schemas/User"
        },
        "creator_id": {
          "format": "uuid",
          "type": "string"
        },
        "description": {
          "maxLength": 2000,
          "type": "string"
        },
        "epic": {
          "$ref": "#/components/schemas/Epic"
        },
        "epic_id": {
          "format": "uuid",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "last_modified": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "$ref": "#/components/schemas/Priority"
        },
        "reference_id": {
          "pattern": "^US-\\d+$",
          "type": "string"
        },
        "requirements": {
          "items": {
            "$ref": "#/components/schemas/Requirement"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/components/schemas/UserStoryStatus"
        },
        "title": {
          "maxLength": 500,
          "type": "string"
        }
      },
      "required": [
        "id",
        "reference_id",
        "title",
        "status",
        "priority",
        "epic_id",
        "creator_id",
        "created_at",
        "last_modified"
      ],
      "type": "object"
    },
    "UserStoryListResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/ListResponse"
        },
        {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/UserStory"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "UserStoryStatus": {
      "enum": [
        "Backlog",
        "Draft",
        "In Progress",
        "Done",
        "Cancelled"
      ],
      "type": "string"
    },
    "ValidationResponse": {
      "properties": {
        "errors": {
          "description": "List of validation error messages",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "valid": {
          "description": "Whether the validation passed",
          "type": "boolean"
        }
      },
      "required": [
        "valid",
        "errors"
      ],
      "type": "object"
    }
  },
  "security_schemes": {
    "BearerAuth": {
      "bearerFormat": "JWT",
      "description": "JWT token for authentication. Include as Authorization Bearer token header.",
      "scheme": "bearer",
      "type": "http"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Development server"
    },
    {
      "url": "https://api.requirements.example.com",
      "description": "Production server"
    }
  ],
  "tag_groups": [
    {
      "Name": "Acceptance Criteria",
      "Endpoints": [
        {
          "Method": "get",
          "Path": "/api/v1/acceptance-criteria/{id}",
          "Summary": "Get acceptance criteria by ID",
          "Description": "",
          "Tags": [
            "Acceptance Criteria"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Acceptance criteria details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AcceptanceCriteria"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "put",
          "Path": "/api/v1/acceptance-criteria/{id}",
          "Summary": "Update acceptance criteria",
          "Description": "",
          "Tags": [
            "Acceptance Criteria"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAcceptanceCriteriaRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Acceptance criteria updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AcceptanceCriteria"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/api/v1/acceptance-criteria/{id}",
          "Summary": "Delete acceptance criteria",
          "Description": "",
          "Tags": [
            "Acceptance Criteria"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "Acceptance criteria deleted"
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/acceptance-criteria/{id}/validate-deletion",
          "Summary": "Validate acceptance criteria deletion",
          "Description": "Check if acceptance criteria can be deleted and get dependency information",
          "Tags": [
            "Acceptance Criteria"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Deletion validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DependencyInfo"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/api/v1/acceptance-criteria/{id}/delete",
          "Summary": "Comprehensive acceptance criteria deletion",
          "Description": "Delete acceptance criteria with all dependencies and cascade operations",
          "Tags": [
            "Acceptance Criteria"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Deletion completed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeletionResult"
                  }
                }
              }
            },
            "409": {
              "description": "Cannot delete due to dependencies",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/acceptance-criteria/{id}/comments/inline/visible",
          "Summary": "Get visible acceptance criteria inline comments",
          "Description": "",
          "Tags": [
            "Acceptance Criteria",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of visible inline comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/acceptance-criteria/{id}/comments",
          "Summary": "Get acceptance criteria comments",
          "Description": "",
          "Tags": [
            "Acceptance Criteria",
            "Comments"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of acceptance criteria comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/acceptance-criteria/{id}/comments",
          "Summary": "Create acceptance criteria comment",
          "Description": "",
          "Tags": [
            "Acceptance Criteria",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/acceptance-criteria/{id}/comments/inline",
          "Summary": "Create acceptance criteria inline comment",
          "Description": "",
          "Tags": [
            "Acceptance Criteria",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInlineCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Inline comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/acceptance-criteria",
          "Summary": "List acceptance criteria",
          "Description": "",
          "Tags": [
            "Acceptance Criteria"
          ],
          "Parameters": [
            {
              "name": "user_story_id",
              "in": "query",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "author_id",
              "in": "query",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of acceptance criteria",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AcceptanceCriteriaListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/acceptance-criteria/{id}/comments/inline/validate",
          "Summary": "Validate acceptance criteria inline comments",
          "Description": "",
          "Tags": [
            "Acceptance Criteria",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentValidationRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResponse"
                  }
                }
              }
            }
          },
          "Security": null
        }
      ]
    },
    {
      "Name": "Authentication",
      "Endpoints": [
        {
          "Method": "get",
          "Path": "/auth/profile",
          "Summary": "Get current user profile",
          "Description": "Get the profile information of the currently authenticated user",
          "Tags": [
            "Authentication"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "User profile",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/auth/users/{id}",
          "Summary": "Get user by ID (Admin only)",
          "Description": "Get user details by ID",
          "Tags": [
            "Authentication",
            "User Management"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "User details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "put",
          "Path": "/auth/users/{id}",
          "Summary": "Update user (Admin only)",
          "Description": "Update user information",
          "Tags": [
            "Authentication",
            "User Management"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "User updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/auth/users/{id}",
          "Summary": "Delete user (Admin only)",
          "Description": "Delete user account",
          "Tags": [
            "Authentication",
            "User Management"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "User deleted successfully"
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/auth/login",
          "Summary": "User login",
          "Description": "Authenticate user and receive JWT token",
          "Tags": [
            "Authentication"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Login successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "Security": []
        },
        {
          "Method": "post",
          "Path": "/auth/change-password",
          "Summary": "Change user password",
          "Description": "Change the password for the currently authenticated user",
          "Tags": [
            "Authentication"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Password changed successfully"
            },
            "400": {
              "description": "Invalid request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/auth/users",
          "Summary": "List users (Admin only)",
          "Description": "Get list of all users",
          "Tags": [
            "Authentication",
            "User Management"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of users",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserListResponse"
                  }
                }
              }
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/auth/users",
          "Summary": "Create user (Admin only)",
          "Description": "Create a new user account",
          "Tags": [
            "Authentication",
            "User Management"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "User created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            }
          },
          "Security": null
        }
      ]
    },
    {
      "Name": "Comments",
      "Endpoints": [
        {
          "Method": "post",
          "Path": "/api/v1/user-stories/{id}/comments/inline",
          "Summary": "Create user story inline comment",
          "Description": "",
          "Tags": [
            "User Stories",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInlineCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Inline comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/user-stories/{id}/comments",
          "Summary": "Get user story comments",
          "Description": "",
          "Tags": [
            "User Stories",
            "Comments"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of user story comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/user-stories/{id}/comments",
          "Summary": "Create user story comment",
          "Description": "",
          "Tags": [
            "User Stories",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/epics/{id}/comments",
          "Summary": "Get epic comments",
          "Description": "Retrieve all comments associated with a specific epic, including both general and inline comments",
          "Tags": [
            "Epics",
            "Comments"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of epic comments retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/epics/{id}/comments",
          "Summary": "Create epic comment",
          "Description": "Create a new general comment on an epic",
          "Tags": [
            "Epics",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Comment created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/comments/{id}/unresolve",
          "Summary": "Unresolve comment",
          "Description": "Mark a previously resolved comment as unresolved, reopening the discussion",
          "Tags": [
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Comment unresolved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/requirements/{id}/comments/inline/validate",
          "Summary": "Validate requirement inline comments",
          "Description": "",
          "Tags": [
            "Requirements",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentValidationRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/acceptance-criteria/{id}/comments/inline/visible",
          "Summary": "Get visible acceptance criteria inline comments",
          "Description": "",
          "Tags": [
            "Acceptance Criteria",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of visible inline comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/acceptance-criteria/{id}/comments",
          "Summary": "Get acceptance criteria comments",
          "Description": "",
          "Tags": [
            "Acceptance Criteria",
            "Comments"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of acceptance criteria comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/acceptance-criteria/{id}/comments",
          "Summary": "Create acceptance criteria comment",
          "Description": "",
          "Tags": [
            "Acceptance Criteria",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/comments/{id}",
          "Summary": "Get comment by ID",
          "Description": "Retrieve a specific comment with its details and optional populated fields",
          "Tags": [
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Comment details retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "put",
          "Path": "/api/v1/comments/{id}",
          "Summary": "Update comment",
          "Description": "Update the content of an existing comment",
          "Tags": [
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Comment updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/api/v1/comments/{id}",
          "Summary": "Delete comment",
          "Description": "Delete a comment and all its replies (cascade deletion)",
          "Tags": [
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "Comment deleted successfully"
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/epics/{id}/comments/inline/validate",
          "Summary": "Validate epic inline comments",
          "Description": "Validate that inline comment positions are still valid against the current epic content",
          "Tags": [
            "Epics",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentValidationRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Validation completed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResponse"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/epics/{id}/comments/inline",
          "Summary": "Create epic inline comment",
          "Description": "",
          "Tags": [
            "Epics",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInlineCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Inline comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/acceptance-criteria/{id}/comments/inline",
          "Summary": "Create acceptance criteria inline comment",
          "Description": "",
          "Tags": [
            "Acceptance Criteria",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInlineCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Inline comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/requirements/{id}/comments/inline/visible",
          "Summary": "Get visible requirement inline comments",
          "Description": "",
          "Tags": [
            "Requirements",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of visible inline comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/comments/status/{status}",
          "Summary": "Get comments by status",
          "Description": "Retrieve comments filtered by their resolution status across all entities",
          "Tags": [
            "Comments"
          ],
          "Parameters": [
            {
              "name": "status",
              "in": "path",
              "description": "Filter comments by resolution status",
              "required": true,
              "schema": {
                "enum": [
                  "resolved",
                  "unresolved"
                ],
                "type": "string"
              }
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of comments filtered by status",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            },
            "400": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/requirements/{id}/comments",
          "Summary": "Get requirement comments",
          "Description": "",
          "Tags": [
            "Requirements",
            "Comments"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of requirement comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/requirements/{id}/comments",
          "Summary": "Create requirement comment",
          "Description": "",
          "Tags": [
            "Requirements",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/requirements/{id}/comments/inline",
          "Summary": "Create requirement inline comment",
          "Description": "",
          "Tags": [
            "Requirements",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInlineCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Inline comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/comments/{id}/replies",
          "Summary": "Get comment replies",
          "Description": "Retrieve all replies to a specific comment with pagination support",
          "Tags": [
            "Comments"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of comment replies retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/comments/{id}/replies",
          "Summary": "Create comment reply",
          "Description": "Create a new reply to an existing comment, establishing a parent-child relationship",
          "Tags": [
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Reply created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/epics/{id}/comments/inline/visible",
          "Summary": "Get visible epic inline comments",
          "Description": "",
          "Tags": [
            "Epics",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of visible inline comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/comments/{id}/resolve",
          "Summary": "Resolve comment",
          "Description": "Mark a comment as resolved, indicating that the issue or question has been addressed",
          "Tags": [
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Comment resolved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/user-stories/{id}/comments/inline/validate",
          "Summary": "Validate user story inline comments",
          "Description": "",
          "Tags": [
            "User Stories",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentValidationRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/acceptance-criteria/{id}/comments/inline/validate",
          "Summary": "Validate acceptance criteria inline comments",
          "Description": "",
          "Tags": [
            "Acceptance Criteria",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentValidationRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/user-stories/{id}/comments/inline/visible",
          "Summary": "Get visible user story inline comments",
          "Description": "",
          "Tags": [
            "User Stories",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of visible inline comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        }
      ]
    },
    {
      "Name": "Configuration",
      "Endpoints": [
        {
          "Method": "get",
          "Path": "/api/v1/config/status-models",
          "Summary": "List status models",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of status models",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusModelListResponse"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "post",
          "Path": "/api/v1/config/status-models",
          "Summary": "Create status model",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateStatusModelRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Status model created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusModel"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/api/v1/config/status-models/default/{entity_type}",
          "Summary": "Get default status model for entity type",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": [
            {
              "name": "entity_type",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/EntityType"
              }
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Default status model",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusModel"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/api/v1/config/status-models/{id}/statuses",
          "Summary": "List statuses by model",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of statuses",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusListResponse"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/api/v1/config/statuses/{id}",
          "Summary": "Get status by ID",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Status details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Status"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "put",
          "Path": "/api/v1/config/statuses/{id}",
          "Summary": "Update status",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStatusRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Status updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Status"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "delete",
          "Path": "/api/v1/config/statuses/{id}",
          "Summary": "Delete status",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "Status deleted"
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "post",
          "Path": "/api/v1/config/statuses",
          "Summary": "Create status",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateStatusRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Status created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Status"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/api/v1/config/status-transitions/{id}",
          "Summary": "Get status transition by ID",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Status transition details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusTransition"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "put",
          "Path": "/api/v1/config/status-transitions/{id}",
          "Summary": "Update status transition",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStatusTransitionRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Status transition updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusTransition"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "delete",
          "Path": "/api/v1/config/status-transitions/{id}",
          "Summary": "Delete status transition",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "Status transition deleted"
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/api/v1/config/requirement-types",
          "Summary": "List requirement types",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of requirement types",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequirementTypeListResponse"
                  }
                }
              }
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "post",
          "Path": "/api/v1/config/requirement-types",
          "Summary": "Create requirement type",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRequirementTypeRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Requirement type created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequirementType"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/api/v1/config/status-models/{id}",
          "Summary": "Get status model by ID",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Status model details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusModel"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "put",
          "Path": "/api/v1/config/status-models/{id}",
          "Summary": "Update status model",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStatusModelRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Status model updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusModel"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "delete",
          "Path": "/api/v1/config/status-models/{id}",
          "Summary": "Delete status model",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "Status model deleted"
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/api/v1/config/status-models/{id}/transitions",
          "Summary": "List status transitions by model",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of status transitions",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusTransitionListResponse"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "post",
          "Path": "/api/v1/config/status-transitions",
          "Summary": "Create status transition",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateStatusTransitionRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Status transition created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusTransition"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/api/v1/config/requirement-types/{id}",
          "Summary": "Get requirement type by ID",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Requirement type details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequirementType"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "put",
          "Path": "/api/v1/config/requirement-types/{id}",
          "Summary": "Update requirement type",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequirementTypeRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Requirement type updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequirementType"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "delete",
          "Path": "/api/v1/config/requirement-types/{id}",
          "Summary": "Delete requirement type",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "Requirement type deleted"
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/api/v1/config/relationship-types",
          "Summary": "List relationship types",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of relationship types",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RelationshipTypeListResponse"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "post",
          "Path": "/api/v1/config/relationship-types",
          "Summary": "Create relationship type",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRelationshipTypeRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Relationship type created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RelationshipType"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "get",
          "Path": "/api/v1/config/relationship-types/{id}",
          "Summary": "Get relationship type by ID",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Relationship type details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RelationshipType"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "put",
          "Path": "/api/v1/config/relationship-types/{id}",
          "Summary": "Update relationship type",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRelationshipTypeRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Relationship type updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RelationshipType"
                  }
                }
              }
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        },
        {
          "Method": "delete",
          "Path": "/api/v1/config/relationship-types/{id}",
          "Summary": "Delete relationship type",
          "Description": "",
          "Tags": [
            "Configuration"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "Relationship type deleted"
            }
          },
          "Security": [
            {
              "BearerAuth": []
            }
          ]
        }
      ]
    },
    {
      "Name": "Deletion",
      "Endpoints": [
        {
          "Method": "get",
          "Path": "/api/v1/deletion/confirm",
          "Summary": "Get deletion confirmation",
          "Description": "Get deletion validation information for any entity type using query parameters",
          "Tags": [
            "Deletion"
          ],
          "Parameters": [
            {
              "name": "entity_type",
              "in": "query",
              "description": "Type of entity to validate deletion for",
              "required": true,
              "schema": {
                "enum": [
                  "epic",
                  "user_story",
                  "acceptance_criteria",
                  "requirement"
                ],
                "type": "string"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Entity ID to validate deletion for",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Deletion validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DependencyInfo"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - missing or invalid parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Entity not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "Security": null
        }
      ]
    },
    {
      "Name": "Epics",
      "Endpoints": [
        {
          "Method": "patch",
          "Path": "/api/v1/epics/{id}/status",
          "Summary": "Change epic status",
          "Description": "",
          "Tags": [
            "Epics"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusChangeRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Status changed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Epic"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/epics/{id}",
          "Summary": "Get epic by ID",
          "Description": "",
          "Tags": [
            "Epics"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Epic details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Epic"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "put",
          "Path": "/api/v1/epics/{id}",
          "Summary": "Update epic",
          "Description": "",
          "Tags": [
            "Epics"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateEpicRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Epic updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Epic"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/api/v1/epics/{id}",
          "Summary": "Delete epic",
          "Description": "",
          "Tags": [
            "Epics"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "Epic deleted"
            },
            "409": {
              "description": "Cannot delete due to dependencies",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/epics/{id}/user-stories",
          "Summary": "Get epic with user stories",
          "Description": "",
          "Tags": [
            "Epics"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Epic with user stories",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Epic"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/epics/{id}/user-stories",
          "Summary": "Create user story in epic",
          "Description": "",
          "Tags": [
            "Epics"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserStoryRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "User story created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserStory"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/epics/{id}/comments",
          "Summary": "Get epic comments",
          "Description": "Retrieve all comments associated with a specific epic, including both general and inline comments",
          "Tags": [
            "Epics",
            "Comments"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of epic comments retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/epics/{id}/comments",
          "Summary": "Create epic comment",
          "Description": "Create a new general comment on an epic",
          "Tags": [
            "Epics",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Comment created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/epics/{id}/validate-deletion",
          "Summary": "Validate epic deletion",
          "Description": "Check if epic can be deleted and get dependency information",
          "Tags": [
            "Epics"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Deletion validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DependencyInfo"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/epics",
          "Summary": "List epics",
          "Description": "",
          "Tags": [
            "Epics"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "status",
              "in": "query",
              "schema": {
                "$ref": "#/components/schemas/EpicStatus"
              }
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of epics",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EpicListResponse"
                  }
                }
              }
            },
            "401": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/epics",
          "Summary": "Create epic",
          "Description": "",
          "Tags": [
            "Epics"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEpicRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Epic created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Epic"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "401": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "patch",
          "Path": "/api/v1/epics/{id}/assign",
          "Summary": "Assign epic to user",
          "Description": "",
          "Tags": [
            "Epics"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Epic assigned",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Epic"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/epics/{id}/comments/inline/validate",
          "Summary": "Validate epic inline comments",
          "Description": "Validate that inline comment positions are still valid against the current epic content",
          "Tags": [
            "Epics",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentValidationRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Validation completed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResponse"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/api/v1/epics/{id}/delete",
          "Summary": "Comprehensive epic deletion",
          "Description": "Delete epic with all dependencies and cascade operations",
          "Tags": [
            "Epics"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Deletion completed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeletionResult"
                  }
                }
              }
            },
            "409": {
              "description": "Cannot delete due to dependencies",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/epics/{id}/comments/inline",
          "Summary": "Create epic inline comment",
          "Description": "",
          "Tags": [
            "Epics",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInlineCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Inline comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/epics/{id}/comments/inline/visible",
          "Summary": "Get visible epic inline comments",
          "Description": "",
          "Tags": [
            "Epics",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of visible inline comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        }
      ]
    },
    {
      "Name": "Health",
      "Endpoints": [
        {
          "Method": "get",
          "Path": "/ready",
          "Summary": "Readiness check",
          "Description": "Check if the application is ready to serve requests",
          "Tags": [
            "Health"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Application is ready",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HealthCheckResponse"
                  }
                }
              }
            },
            "503": {
              "description": "Application is not ready",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HealthCheckResponse"
                  }
                }
              }
            }
          },
          "Security": []
        },
        {
          "Method": "get",
          "Path": "/live",
          "Summary": "Liveness check",
          "Description": "Check if the application is alive",
          "Tags": [
            "Health"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Application is alive",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HealthCheckResponse"
                  }
                }
              }
            }
          },
          "Security": []
        }
      ]
    },
    {
      "Name": "Navigation",
      "Endpoints": [
        {
          "Method": "get",
          "Path": "/api/v1/hierarchy/user-stories/{id}",
          "Summary": "Get user story hierarchy",
          "Description": "",
          "Tags": [
            "Navigation"
          ],
          "Parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "User story ID (UUID or reference ID)",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "User story hierarchy",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HierarchyNode"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/hierarchy/path/{entity_type}/{id}",
          "Summary": "Get entity breadcrumb path",
          "Description": "",
          "Tags": [
            "Navigation"
          ],
          "Parameters": [
            {
              "name": "entity_type",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/EntityType"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Entity path",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "path": {
                        "items": {
                          "$ref": "#/components/schemas/EntityPath"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/hierarchy",
          "Summary": "Get full hierarchy",
          "Description": "",
          "Tags": [
            "Navigation"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Complete hierarchy tree",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "hierarchy": {
                        "items": {
                          "$ref": "#/components/schemas/HierarchyNode"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/hierarchy/epics/{id}",
          "Summary": "Get epic hierarchy",
          "Description": "",
          "Tags": [
            "Navigation"
          ],
          "Parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Epic ID (UUID or reference ID)",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Epic hierarchy",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HierarchyNode"
                  }
                }
              }
            }
          },
          "Security": null
        }
      ]
    },
    {
      "Name": "Requirements",
      "Endpoints": [
        {
          "Method": "post",
          "Path": "/api/v1/requirements/relationships",
          "Summary": "Create requirement relationship",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRelationshipRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Relationship created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequirementRelationship"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/requirements/search",
          "Summary": "Search requirements",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": [
            {
              "name": "q",
              "in": "query",
              "description": "Search query",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Search results",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "patch",
          "Path": "/api/v1/requirements/{id}/status",
          "Summary": "Change requirement status",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusChangeRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Status changed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Requirement"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/requirements/{id}",
          "Summary": "Get requirement by ID",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Requirement details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Requirement"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "put",
          "Path": "/api/v1/requirements/{id}",
          "Summary": "Update requirement",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequirementRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Requirement updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Requirement"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/api/v1/requirements/{id}",
          "Summary": "Delete requirement",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "Requirement deleted"
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/requirements/{id}/relationships",
          "Summary": "Get requirement with relationships",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Requirement with relationships",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Requirement"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/requirements/{id}/comments/inline/validate",
          "Summary": "Validate requirement inline comments",
          "Description": "",
          "Tags": [
            "Requirements",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentValidationRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/requirements/{id}/validate-deletion",
          "Summary": "Validate requirement deletion",
          "Description": "Check if requirement can be deleted and get dependency information",
          "Tags": [
            "Requirements"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Deletion validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DependencyInfo"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/requirements/{id}/comments/inline/visible",
          "Summary": "Get visible requirement inline comments",
          "Description": "",
          "Tags": [
            "Requirements",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of visible inline comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/requirements/{id}/comments",
          "Summary": "Get requirement comments",
          "Description": "",
          "Tags": [
            "Requirements",
            "Comments"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of requirement comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/requirements/{id}/comments",
          "Summary": "Create requirement comment",
          "Description": "",
          "Tags": [
            "Requirements",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/requirements/{id}/comments/inline",
          "Summary": "Create requirement inline comment",
          "Description": "",
          "Tags": [
            "Requirements",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInlineCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Inline comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "patch",
          "Path": "/api/v1/requirements/{id}/assign",
          "Summary": "Assign requirement to user",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Requirement assigned",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Requirement"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/requirements",
          "Summary": "List requirements",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": [
            {
              "name": "user_story_id",
              "in": "query",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "acceptance_criteria_id",
              "in": "query",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "type_id",
              "in": "query",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "status",
              "in": "query",
              "schema": {
                "$ref": "#/components/schemas/RequirementStatus"
              }
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of requirements",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequirementListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/requirements",
          "Summary": "Create requirement",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRequirementRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Requirement created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Requirement"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/api/v1/requirements/{id}/delete",
          "Summary": "Comprehensive requirement deletion",
          "Description": "Delete requirement with all dependencies and cascade operations",
          "Tags": [
            "Requirements"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Deletion completed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeletionResult"
                  }
                }
              }
            },
            "409": {
              "description": "Cannot delete due to dependencies",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/api/v1/requirement-relationships/{id}",
          "Summary": "Delete requirement relationship",
          "Description": "",
          "Tags": [
            "Requirements"
          ],
          "Parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "Relationship deleted"
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        }
      ]
    },
    {
      "Name": "Search",
      "Endpoints": [
        {
          "Method": "get",
          "Path": "/api/v1/search",
          "Summary": "Global search",
          "Description": "",
          "Tags": [
            "Search"
          ],
          "Parameters": [
            {
              "name": "q",
              "in": "query",
              "description": "Search query",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "entity_types",
              "in": "query",
              "description": "Comma-separated entity types to search",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Search results",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchResponse"
                  }
                }
              }
            },
            "401": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/search/suggestions",
          "Summary": "Get search suggestions",
          "Description": "",
          "Tags": [
            "Search"
          ],
          "Parameters": [
            {
              "name": "query",
              "in": "query",
              "description": "Partial search query",
              "required": true,
              "schema": {
                "minLength": 2,
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Maximum suggestions per category",
              "schema": {
                "default": 10,
                "maximum": 50,
                "minimum": 1,
                "type": "integer"
              }
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Search suggestions",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchSuggestionsResponse"
                  }
                }
              }
            }
          },
          "Security": null
        }
      ]
    },
    {
      "Name": "User Management",
      "Endpoints": [
        {
          "Method": "get",
          "Path": "/auth/users/{id}",
          "Summary": "Get user by ID (Admin only)",
          "Description": "Get user details by ID",
          "Tags": [
            "Authentication",
            "User Management"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "User details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "put",
          "Path": "/auth/users/{id}",
          "Summary": "Update user (Admin only)",
          "Description": "Update user information",
          "Tags": [
            "Authentication",
            "User Management"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "User updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/auth/users/{id}",
          "Summary": "Delete user (Admin only)",
          "Description": "Delete user account",
          "Tags": [
            "Authentication",
            "User Management"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "User deleted successfully"
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/auth/users",
          "Summary": "List users (Admin only)",
          "Description": "Get list of all users",
          "Tags": [
            "Authentication",
            "User Management"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of users",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserListResponse"
                  }
                }
              }
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/auth/users",
          "Summary": "Create user (Admin only)",
          "Description": "Create a new user account",
          "Tags": [
            "Authentication",
            "User Management"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "User created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "401": {
              "description": ""
            },
            "403": {
              "description": ""
            }
          },
          "Security": null
        }
      ]
    },
    {
      "Name": "User Stories",
      "Endpoints": [
        {
          "Method": "patch",
          "Path": "/api/v1/user-stories/{id}/assign",
          "Summary": "Assign user story to user",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "User story assigned",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserStory"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/user-stories/{id}/comments/inline",
          "Summary": "Create user story inline comment",
          "Description": "",
          "Tags": [
            "User Stories",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInlineCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Inline comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "patch",
          "Path": "/api/v1/user-stories/{id}/status",
          "Summary": "Change user story status",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusChangeRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Status changed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserStory"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/user-stories/{id}/validate-deletion",
          "Summary": "Validate user story deletion",
          "Description": "Check if user story can be deleted and get dependency information",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Deletion validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DependencyInfo"
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/user-stories/{id}/requirements",
          "Summary": "Get user story requirements",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "User story with requirements",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserStory"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/user-stories/{id}/requirements",
          "Summary": "Create requirement in user story",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRequirementRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Requirement created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Requirement"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/user-stories/{id}/comments",
          "Summary": "Get user story comments",
          "Description": "",
          "Tags": [
            "User Stories",
            "Comments"
          ],
          "Parameters": [
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of user story comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/user-stories/{id}/comments",
          "Summary": "Create user story comment",
          "Description": "",
          "Tags": [
            "User Stories",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommentRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Comment created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/user-stories/{id}",
          "Summary": "Get user story by ID",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "User story details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserStory"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "put",
          "Path": "/api/v1/user-stories/{id}",
          "Summary": "Update user story",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserStoryRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "User story updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserStory"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/api/v1/user-stories/{id}",
          "Summary": "Delete user story",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "204": {
              "description": "User story deleted"
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/user-stories",
          "Summary": "List user stories",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": [
            {
              "name": "epic_id",
              "in": "query",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "status",
              "in": "query",
              "schema": {
                "$ref": "#/components/schemas/UserStoryStatus"
              }
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            },
            {
              "name": "",
              "in": ""
            }
          ],
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of user stories",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserStoryListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/user-stories",
          "Summary": "Create user story",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserStoryRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "User story created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserStory"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "delete",
          "Path": "/api/v1/user-stories/{id}/delete",
          "Summary": "Comprehensive user story deletion",
          "Description": "Delete user story with all dependencies and cascade operations",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "Deletion completed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeletionResult"
                  }
                }
              }
            },
            "409": {
              "description": "Cannot delete due to dependencies",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/user-stories/{id}/acceptance-criteria",
          "Summary": "Get user story acceptance criteria",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of acceptance criteria",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AcceptanceCriteriaListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/user-stories/{id}/acceptance-criteria",
          "Summary": "Create acceptance criteria in user story",
          "Description": "",
          "Tags": [
            "User Stories"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAcceptanceCriteriaRequest"
                }
              }
            }
          },
          "Responses": {
            "201": {
              "description": "Acceptance criteria created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AcceptanceCriteria"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "post",
          "Path": "/api/v1/user-stories/{id}/comments/inline/validate",
          "Summary": "Validate user story inline comments",
          "Description": "",
          "Tags": [
            "User Stories",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentValidationRequest"
                }
              }
            }
          },
          "Responses": {
            "200": {
              "description": "Validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResponse"
                  }
                }
              }
            }
          },
          "Security": null
        },
        {
          "Method": "get",
          "Path": "/api/v1/user-stories/{id}/comments/inline/visible",
          "Summary": "Get visible user story inline comments",
          "Description": "",
          "Tags": [
            "User Stories",
            "Comments"
          ],
          "Parameters": null,
          "RequestBody": null,
          "Responses": {
            "200": {
              "description": "List of visible inline comments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CommentListResponse"
                  }
                }
              }
            }
          },
          "Security": null
        }
      ]
    }
  ]
}